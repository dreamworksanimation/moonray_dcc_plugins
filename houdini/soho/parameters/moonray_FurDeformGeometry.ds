#include "$HFS/houdini/soho/parameters/CommonMacros.ds"
{
    name	parameters
    group {
        name    "folder"
        label   "Curve"

        parm {
            name    "xn__proceduralradius_control_9fb"
            label   "procedural:radius"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralradius_81a"
            label   "Radius"
            type    float
            default { "1" }
            help    "Radius multiplier for fur"
            disablewhen "{ xn__proceduralradius_control_9fb == block } { xn__proceduralradius_control_9fb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__proceduralbase_width_factor_control_6xb"
            label   "procedural:base_width_factor"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralbase_width_factor_5kb"
            label   "Base Width Factor"
            type    float
            default { "1" }
            help    "Multiplier for the radius of the base of the fur"
            disablewhen "{ xn__proceduralbase_width_factor_control_6xb == block } { xn__proceduralbase_width_factor_control_6xb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__proceduraltip_width_factor_control_kwb"
            label   "procedural:tip_width_factor"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraltip_width_factor_jjb"
            label   "Tip Width Factor"
            type    float
            default { "1" }
            help    "Multiplier for the radius of the tip of the fur"
            disablewhen "{ xn__proceduraltip_width_factor_control_kwb == block } { xn__proceduraltip_width_factor_control_kwb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__proceduraldensity_lod_control_fob"
            label   "procedural:density_lod"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraldensity_lod_ebb"
            label   "Density Lod"
            type    float
            default { "1" }
            help    "Density of the fur"
            disablewhen "{ xn__proceduraldensity_lod_control_fob == block } { xn__proceduraldensity_lod_control_fob == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__proceduralapply_motion_blur_control_6xb"
            label   "procedural:apply_motion_blur"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralapply_motion_blur_5kb"
            label   "Apply Motion Blur"
            type    toggle
            default { "1" }
            help    "Apply motion blur to the fur"
            disablewhen "{ xn__proceduralapply_motion_blur_control_6xb == block } { xn__proceduralapply_motion_blur_control_6xb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralignore_curve_radius_control_g1b"
            label   "procedural:ignore_curve_radius"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralignore_curve_radius_fob"
            label   "Ignore Curve Radius"
            type    toggle
            default { "0" }
            help    "Ignores radius/width/pscale track in fur cache and sets radius to 1.0"
            disablewhen "{ xn__proceduralignore_curve_radius_control_g1b == block } { xn__proceduralignore_curve_radius_control_g1b == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralkill_list_control_5kb"
            label   "procedural:kill_list"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralkill_list_46a"
            label   "Kill List"
            type    string
            default { "" }
            help    "Space separated list of curve ids to kill.   Ids separated by a dash specify a range of ids to kill"
            disablewhen "{ xn__proceduralkill_list_control_5kb == block } { xn__proceduralkill_list_control_5kb == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduralcurves_type_control_fob"
            label   "procedural:curves_type"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralcurves_type_ebb"
            label   "Curves Type"
            type    string
            default { "force_bspline" }
            help    "Controls what type of curves are rendered.   abc uses the type set in the input abc file otherwise force curves to be specified type"
            disablewhen "{ xn__proceduralcurves_type_control_fob == block } { xn__proceduralcurves_type_control_fob == none }"
            menu {
                "use_abc_type"  "Use_Abc_Type"
                "force_linear"  "Force_Linear"
                "force_bspline" "Force_Bspline"
                "force_bezier"  "Force_Bezier"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__proceduralcurves_subtype_control_btb"
            label   "procedural:curves_subtype"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralcurves_subtype_9fb"
            label   "Curves Subtype"
            type    string
            default { "ray_facing" }
            help    "Curves subtype is ray facing or round"
            disablewhen "{ xn__proceduralcurves_subtype_control_btb == block } { xn__proceduralcurves_subtype_control_btb == none }"
            menu {
                "ray_facing"    "Ray_Facing"
                "round"         "Round"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__proceduraltessellation_rate_control_6xb"
            label   "procedural:tessellation_rate"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraltessellation_rate_5kb"
            label   "Tessellation Rate"
            type    integer
            default { "4" }
            help    "Number of segments to split curve spans into"
            disablewhen "{ xn__proceduraltessellation_rate_control_6xb == block } { xn__proceduraltessellation_rate_control_6xb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "int" }
        }
    }

    group {
        name    "folder2"
        label   "Motion Guides"

        parm {
            name    "xn__proceduralapply_motion_guides_control_g1b"
            label   "procedural:apply_motion_guides"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralapply_motion_guides_fob"
            label   "Apply Motion Guides"
            type    toggle
            default { "0" }
            help    "Apply the motion guides to deform the fur"
            disablewhen "{ xn__proceduralapply_motion_guides_control_g1b == block } { xn__proceduralapply_motion_guides_control_g1b == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralmotion_guides_deformation_mode_control_dkc"
            label   "procedural:motion_guides_deformation_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_deformation_mode_c6b"
            label   "Motion Guides Deformation Mode"
            type    integer
            default { "2" }
            help    "Motion guides Deformation mode: 0 - Motion Interpolation,                                  1 - Position Interpolation, 2 - Position Wrap"
            disablewhen "{ xn__proceduralmotion_guides_deformation_mode_control_dkc == block } { xn__proceduralmotion_guides_deformation_mode_control_dkc == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "int" }
        }
        parm {
            name    "xn__proceduralmotion_guides_binding_mode_control_udc"
            label   "procedural:motion_guides_binding_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_binding_mode_tzb"
            label   "Motion Guides Binding Mode"
            type    integer
            default { "0" }
            help    "Motion guides hair binding mode: 0 - Tip Binding, 1 - Per-CV Binding"
            disablewhen "{ xn__proceduralmotion_guides_binding_mode_control_udc == block } { xn__proceduralmotion_guides_binding_mode_control_udc == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "int" }
        }
        parm {
            name    "xn__proceduralmotion_guides_file_control_tzb"
            label   "procedural:motion_guides_file"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_file_smb"
            label   "Motion Guides File"
            type    file
            default { "" }
            help    "Alembic file containing motion guides"
            disablewhen "{ xn__proceduralmotion_guides_file_control_tzb == block } { xn__proceduralmotion_guides_file_control_tzb == none }"
            parmtag { "usdvaluetype" "asset" }
        }
        parm {
            name    "xn__proceduralmotion_guides_node_path_control_y7b"
            label   "procedural:motion_guides_node_path"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_node_path_xub"
            label   "Motion Guides Node Path"
            type    string
            default { "" }
            help    "Path to the motion guides within the Alembic file"
            disablewhen "{ xn__proceduralmotion_guides_node_path_control_y7b == block } { xn__proceduralmotion_guides_node_path_control_y7b == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduralmotion_guides_connectivity_file_control_zlc"
            label   "procedural:motion_guides_connectivity_file"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_connectivity_file_y7b"
            label   "Motion Guides Connectivity File"
            type    file
            default { "" }
            help    "Alembic file containing motion guides connectivity mesh"
            disablewhen "{ xn__proceduralmotion_guides_connectivity_file_control_zlc == block } { xn__proceduralmotion_guides_connectivity_file_control_zlc == none }"
            parmtag { "usdvaluetype" "asset" }
        }
        parm {
            name    "xn__proceduralmotion_guides_connectivity_node_path_control_4tc"
            label   "procedural:motion_guides_connectivity_node_path"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_connectivity_node_path_3gc"
            label   "Motion Guides Connectivity Node Path"
            type    string
            default { "" }
            help    "Path to the connectivity data within the Alembic file"
            disablewhen "{ xn__proceduralmotion_guides_connectivity_node_path_control_4tc == block } { xn__proceduralmotion_guides_connectivity_node_path_control_4tc == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduralmotion_guides_max_distance_control_udc"
            label   "procedural:motion_guides_max_distance"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_max_distance_tzb"
            label   "Motion Guides Max Distance"
            type    float
            default { "0.1" }
            help    "Maximum allowable distance between fur curve and motion guides connectivity mesh"
            disablewhen "{ xn__proceduralmotion_guides_max_distance_control_udc == block } { xn__proceduralmotion_guides_max_distance_control_udc == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__proceduralmotion_guides_collision_track_control_qic"
            label   "procedural:motion_guides_collision_track"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_collision_track_p4b"
            label   "Motion Guides Collision Track"
            type    string
            default { "colliderDistance" }
            help    "Track on motion guide curves to control collision distance for 'wrap' mode"
            disablewhen "{ xn__proceduralmotion_guides_collision_track_control_qic == block } { xn__proceduralmotion_guides_collision_track_control_qic == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduralmotion_guides_collision_tolerance_control_8oc"
            label   "procedural:motion_guides_collision_tolerance"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_collision_tolerance_7bc"
            label   "Motion Guides Collision Tolerance"
            type    float
            default { "0" }
            help    "Tolerance < 0 allows penetration and > 0 forces a barrier space"
            disablewhen "{ xn__proceduralmotion_guides_collision_tolerance_control_8oc == block } { xn__proceduralmotion_guides_collision_tolerance_control_8oc == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__proceduralmotion_guides_association_mode_control_dkc"
            label   "procedural:motion_guides_association_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_association_mode_c6b"
            label   "Motion Guides Association Mode"
            type    string
            default { "use connectivity mesh" }
            help    "Whether to use the input connectivity mesh or \"clumpId\" attribute on both                 the fur curves and motion guide curves for motion guide association"
            disablewhen "{ xn__proceduralmotion_guides_association_mode_control_dkc == block } { xn__proceduralmotion_guides_association_mode_control_dkc == none }"
            menu {
                "use connectivity mesh" "Use Connectivity Mesh"
                "use clumpId"           "use clumpId"
            }
            parmtag { "usdvaluetype" "token" }
        }
    }

    group {
        name    "folder3"
        label   "Model"

        parm {
            name    "xn__proceduralrender_fur_ref_file_control_g1b"
            label   "procedural:render_fur_ref_file"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralrender_fur_ref_file_fob"
            label   "Render Fur Ref File"
            type    file
            default { "" }
            help    "Alembic file which includes the renderable fur in reference space"
            disablewhen "{ xn__proceduralrender_fur_ref_file_control_g1b == block } { xn__proceduralrender_fur_ref_file_control_g1b == none }"
            parmtag { "usdvaluetype" "asset" }
        }
        parm {
            name    "xn__proceduralabc_geometry_pass_through_control_7bc"
            label   "procedural:abc_geometry_pass_through"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralabc_geometry_pass_through_6xb"
            label   "Abc Geometry Pass Through"
            type    toggle
            default { "0" }
            help    "bypass all fur deform functionality and process curves the same as the AbcGeometry shader\n"
            disablewhen "{ xn__proceduralabc_geometry_pass_through_control_7bc == block } { xn__proceduralabc_geometry_pass_through_control_7bc == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralabc_geometry_use_evaluation_frame_control_8oc"
            label   "procedural:abc_geometry_use_evaluation_frame"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralabc_geometry_use_evaluation_frame_7bc"
            label   "Abc Geometry Use Evaluation Frame"
            type    toggle
            default { "0" }
            help    "use the evaluation frame instead of the current frame\n"
            disablewhen "{ xn__proceduralabc_geometry_pass_through_6xb != 1 } { xn__proceduralabc_geometry_use_evaluation_frame_control_8oc == block } { xn__proceduralabc_geometry_use_evaluation_frame_control_8oc == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralabc_geometry_evaluation_frame_control_qic"
            label   "procedural:abc_geometry_evaluation_frame"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralabc_geometry_evaluation_frame_p4b"
            label   "Abc Geometry Evaluation Frame"
            type    float
            default { "0" }
            help    "frame to use when abc_geometry_use_evaluation_frame is set to true\n"
            disablewhen "{ xn__proceduralabc_geometry_pass_through_6xb != 1 } { xn__proceduralabc_geometry_evaluation_frame_control_qic == block } { xn__proceduralabc_geometry_evaluation_frame_control_qic == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__proceduralskin_file_control_5kb"
            label   "procedural:skin_file"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralskin_file_46a"
            label   "Skin File"
            type    file
            default { "" }
            help    "Alembic file which includes the skin to attach the fur to"
            disablewhen "{ xn__proceduralskin_file_control_5kb == block } { xn__proceduralskin_file_control_5kb == none }"
            parmtag { "usdvaluetype" "asset" }
        }
        parm {
            name    "xn__proceduralskin_asset_control_smb"
            label   "procedural:skin_asset"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralskin_asset_r8a"
            label   "Skin Asset"
            type    string
            default { "" }
            help    "Asset withing the reference skin file to use"
            disablewhen "{ xn__proceduralskin_asset_control_smb == block } { xn__proceduralskin_asset_control_smb == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduralstatic_skin_control_fob"
            label   "procedural:static_skin"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralstatic_skin_ebb"
            label   "Static Skin"
            type    toggle
            default { "0" }
            help    "Use when the skin file is not animated and has no reference frame"
            disablewhen "{ xn__proceduralstatic_skin_control_fob == block } { xn__proceduralstatic_skin_control_fob == none }"
            parmtag { "usdvaluetype" "bool" }
        }
    }

    group {
        name    "folder4"
        label   "Binding"

        parm {
            name    "xn__proceduralapply_skin_deformation_control_c6b"
            label   "procedural:apply_skin_deformation"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralapply_skin_deformation_btb"
            label   "Apply Skin Deformation"
            type    toggle
            default { "1" }
            help    "Apply the deformations the fur"
            disablewhen "{ xn__proceduralapply_skin_deformation_control_c6b == block } { xn__proceduralapply_skin_deformation_control_c6b == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralattach_type_control_fob"
            label   "procedural:attach_type"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralattach_type_ebb"
            label   "Attach Type"
            type    string
            default { "hull" }
            help    "How to attach the curves to the skin surface: 0 - polygonal hull, 1 - subdivision limit"
            disablewhen "{ xn__proceduralattach_type_control_fob == block } { xn__proceduralattach_type_control_fob == none }"
            menu {
                "hull"  "Hull"
                "limit" "Limit"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__proceduralsnap_to_limit_control_orb"
            label   "procedural:snap_to_limit"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralsnap_to_limit_neb"
            label   "Snap To Limit"
            type    toggle
            default { "0" }
            help    "Snap curves to skin limit surface before deformation"
            disablewhen "{ xn__proceduralsnap_to_limit_control_orb == block } { xn__proceduralsnap_to_limit_control_orb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralattach_distance_threshold_control_7bc"
            label   "procedural:attach_distance_threshold"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralattach_distance_threshold_6xb"
            label   "Attach Distance Threshold"
            type    float
            default { "0.1" }
            help    "Maximum allowable distance between curve and reference mesh surface"
            disablewhen "{ xn__proceduralattach_distance_threshold_control_7bc == block } { xn__proceduralattach_distance_threshold_control_7bc == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__proceduraluse_closest_point_control_6xb"
            label   "procedural:use_closest_point"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraluse_closest_point_5kb"
            label   "Use Closest Point"
            type    toggle
            default { "1" }
            help    "Use ST from closest point on skin for deformation. If false, requires \"pu\", \"pv\", and \"faceId\" attributes"
            disablewhen "{ xn__proceduraluse_closest_point_control_6xb == block } { xn__proceduraluse_closest_point_control_6xb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduraluse_closest_mesh_control_kwb"
            label   "procedural:use_closest_mesh"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraluse_closest_mesh_jjb"
            label   "Use Closest Mesh"
            type    toggle
            default { "0" }
            help    "Find the closest mesh for each curve instead of using matching part names"
            disablewhen "{ xn__proceduraluse_closest_mesh_control_kwb == block } { xn__proceduraluse_closest_mesh_control_kwb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
    }

    group {
        name    "folder5"
        label   "Clumping"

        parm {
            name    "xn__proceduralapply_clumping_control_btb"
            label   "procedural:apply_clumping"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralapply_clumping_9fb"
            label   "Apply Clumping"
            type    toggle
            default { "0" }
            help    "Apply the clumping to the deformed fur"
            disablewhen "{ xn__proceduralapply_clumping_control_btb == block } { xn__proceduralapply_clumping_control_btb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralclump_file_control_smb"
            label   "procedural:clump_file"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralclump_file_r8a"
            label   "Clump File"
            type    file
            default { "" }
            help    "Alembic file containing clump curves"
            disablewhen "{ xn__proceduralclump_file_control_smb == block } { xn__proceduralclump_file_control_smb == none }"
            parmtag { "usdvaluetype" "asset" }
        }
        parm {
            name    "xn__proceduralclump_file_node_path_control_22b"
            label   "procedural:clump_file_node_path"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralclump_file_node_path_1pb"
            label   "Clump File Node Path"
            type    string
            default { "" }
            help    "Path to the clump curves within the Alembic file"
            disablewhen "{ xn__proceduralclump_file_node_path_control_22b == block } { xn__proceduralclump_file_node_path_control_22b == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduralclump_amount_control_1pb"
            label   "procedural:clump_amount"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralclump_amount_0cb"
            label   "Clump Amount"
            type    float
            default { "1" }
            help    "Amount of clumping to apply"
            disablewhen "{ xn__proceduralclump_amount_control_1pb == block } { xn__proceduralclump_amount_control_1pb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
    }

    group {
        name    "folder6"
        label   "Displace"

        parm {
            name    "xn__proceduraldisplacement_shader_control_g1b"
            label   "procedural:displacement_shader"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraldisplacement_shader_fob"
            label   "Displacement Shader"
            type    oppath
            default { "" }
            help    "Displacement shader to offset fur curves.  Typically the same that is applied to the skin surface."
            disablewhen "{ xn__proceduraldisplacement_shader_control_g1b == block } { xn__proceduraldisplacement_shader_control_g1b == none }"
            parmtag { "oprelative" "." }
            parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }
        }
        parm {
            name    "xn__proceduralsurface_offset_control_btb"
            label   "procedural:surface_offset"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralsurface_offset_9fb"
            label   "Surface Offset"
            type    float
            default { "0" }
            help    "Offset the curves along the skin's surface normal"
            disablewhen "{ xn__proceduralsurface_offset_control_btb == block } { xn__proceduralsurface_offset_control_btb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
    }

    group {
        name    "folder7"
        label   "Util"

        parm {
            name    "xn__proceduralthread_parts_control_1pb"
            label   "procedural:thread_parts"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralthread_parts_0cb"
            label   "Thread Parts"
            type    toggle
            default { "0" }
            help    "Multi-thread part processing.   Faster but at the cost of higher memory."
            disablewhen "{ xn__proceduralthread_parts_control_1pb == block } { xn__proceduralthread_parts_control_1pb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
    }

    parm {
        name    "xn__procedurallabel_control_neb"
        label   "procedural:label"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__procedurallabel_m0a"
        label   "Label"
        type    string
        default { "" }
        help    "label used in material aov expresssions"
        disablewhen "{ xn__procedurallabel_control_neb == block } { xn__procedurallabel_control_neb == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralreferences_control_smb"
        label   "procedural:references"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "references"
        label    "References"
        default 0
        disablewhen "{ xn__proceduralreferences_control_smb == block } { xn__proceduralreferences_control_smb == none }"
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }

        parm {
            name    "xn__proceduralreferences_r8a#"
            label   "References"
            type    oppath
            default { "" }
            help    "list of geometries that geometry procedural can reference during procedural generate/update stages. For example, an instancer geometry procedural can instance primitives generated by the reference geometry procedural."
            parmtag { "moonray::is_parm" "1" }
            parmtag { "oprelative" "." }
        }
    }

    parm {
        name    "xn__proceduralstatic_control_9fb"
        label   "procedural:static"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralstatic_81a"
        label   "Static"
        type    toggle
        default { "1" }
        help    "disable if the geometry will be updated between frames"
        disablewhen "{ xn__proceduralstatic_control_9fb == block } { xn__proceduralstatic_control_9fb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralside_type_control_5kb"
        label   "procedural:side_type"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralside_type_46a"
        label   "Side Type"
        type    string
        default { "force two-sided" }
        help    "set single sidedness of the mesh, will affect the visibility of the mesh based on normal direction"
        disablewhen "{ xn__proceduralside_type_control_5kb == block } { xn__proceduralside_type_control_5kb == none }"
        menu {
            "force two-sided"       "Force Two-Sided"
            "force single-sided"    "Force Single-Sided"
            "use mesh sidedness"    "Use Mesh Sidedness"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduralreverse_normals_control_xub"
        label   "procedural:reverse_normals"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralreverse_normals_whb"
        label   "Reverse Normals"
        type    toggle
        default { "0" }
        help    "enable to reverse the normals in the geometry"
        disablewhen "{ xn__proceduralreverse_normals_control_xub == block } { xn__proceduralreverse_normals_control_xub == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_in_camera_control_6xb"
        label   "procedural:visible_in_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_in_camera_5kb"
        label   "Visible In Camera"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible to camera rays"
        disablewhen "{ xn__proceduralvisible_in_camera_control_6xb == block } { xn__proceduralvisible_in_camera_control_6xb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_shadow_control_btb"
        label   "procedural:visible_shadow"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_shadow_9fb"
        label   "Visible Shadow"
        type    toggle
        default { "1" }
        help    "whether the geometry casts shadows"
        disablewhen "{ xn__proceduralvisible_shadow_control_btb == block } { xn__proceduralvisible_shadow_control_btb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_reflection_control_udc"
        label   "procedural:visible_diffuse_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_reflection_tzb"
        label   "Visible Diffuse Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in diffuse reflection"
        disablewhen "{ xn__proceduralvisible_diffuse_reflection_control_udc == block } { xn__proceduralvisible_diffuse_reflection_control_udc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_transmission_control_3gc"
        label   "procedural:visible_diffuse_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_transmission_22b"
        label   "Visible Diffuse Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in diffuse transmission"
        disablewhen "{ xn__proceduralvisible_diffuse_transmission_control_3gc == block } { xn__proceduralvisible_diffuse_transmission_control_3gc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_glossy_reflection_control_7bc"
        label   "procedural:visible_glossy_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_glossy_reflection_6xb"
        label   "Visible Glossy Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in glossy reflection."
        disablewhen "{ xn__proceduralvisible_glossy_reflection_control_7bc == block } { xn__proceduralvisible_glossy_reflection_control_7bc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_glossy_transmission_control_hfc"
        label   "procedural:visible_glossy_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_glossy_transmission_g1b"
        label   "Visible Glossy Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in glossy transmission (refraction)."
        disablewhen "{ xn__proceduralvisible_glossy_transmission_control_hfc == block } { xn__proceduralvisible_glossy_transmission_control_hfc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_mirror_reflection_control_7bc"
        label   "procedural:visible_mirror_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_mirror_reflection_6xb"
        label   "Visible Mirror Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in miror reflection."
        disablewhen "{ xn__proceduralvisible_mirror_reflection_control_7bc == block } { xn__proceduralvisible_mirror_reflection_control_7bc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_mirror_transmission_control_hfc"
        label   "procedural:visible_mirror_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_mirror_transmission_g1b"
        label   "Visible Mirror Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in miror transmission (refraction)."
        disablewhen "{ xn__proceduralvisible_mirror_transmission_control_hfc == block } { xn__proceduralvisible_mirror_transmission_control_hfc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_volume_control_btb"
        label   "procedural:visible_volume"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_volume_9fb"
        label   "Visible Volume"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in indirect volume rays"
        disablewhen "{ xn__proceduralvisible_volume_control_btb == block } { xn__proceduralvisible_volume_control_btb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralray_epsilon_control_fob"
        label   "procedural:ray_epsilon"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralray_epsilon_ebb"
        label   "Ray Epsilon"
        type    float
        default { "0" }
        help    "When a secondary ray is fired, anything within this distance of the intersection point will be ignored.  Instead, it is considered part of the current intersection's geometry.  If zero, an automatically calculated epsilon will be used."
        disablewhen "{ xn__proceduralray_epsilon_control_fob == block } { xn__proceduralray_epsilon_control_fob == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralshadow_ray_epsilon_control_tzb"
        label   "procedural:shadow_ray_epsilon"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralshadow_ray_epsilon_smb"
        label   "Shadow Ray Epsilon"
        type    float
        default { "0" }
        help    "When a shadow ray is fired, anything within this distance of the intersection point will be ignored.  If this value is less than \"ray_epsilon\", then it has no additional effect."
        disablewhen "{ xn__proceduralshadow_ray_epsilon_control_tzb == block } { xn__proceduralshadow_ray_epsilon_control_tzb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralshadow_receiver_label_control_p4b"
        label   "procedural:shadow_receiver_label"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralshadow_receiver_label_orb"
        label   "Shadow Receiver Label"
        type    string
        default { "" }
        help    "Label used to associate Geometry objects into sets. Then, using the [\"shadow_exclusion_mappings\"] attribute, shadows from specified geometry parts can be suppressed from casting onto specified sets."
        disablewhen "{ xn__proceduralshadow_receiver_label_control_p4b == block } { xn__proceduralshadow_receiver_label_control_p4b == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralshadow_exclusion_mappings_control_7bc"
        label   "procedural:shadow_exclusion_mappings"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralshadow_exclusion_mappings_6xb"
        label   "Shadow Exclusion Mappings"
        type    string
        default { "" }
        help    "List of mappings of the form A:B where:\nA is a list of names of parts to be mapped, or asterisk to map the whole geometry\nB is a list of labels corresponding to the sets corresponding to distinct values of [\"shadow_receiver_label\"], or asterisk to map to all such sets."
        disablewhen "{ xn__proceduralshadow_exclusion_mappings_control_7bc == block } { xn__proceduralshadow_exclusion_mappings_control_7bc == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralcontains_camera_control_xub"
        label   "procedural:contains_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralcontains_camera_whb"
        label   "Contains Camera"
        type    toggle
        default { "0" }
        help    "Specifies whether the geometry contains the camera and should be used for IOR tracking. This should not be changed by the user -- they should instead attach the relevant geometry to the camera, which will then flag this geometry."
        disablewhen "{ xn__proceduralcontains_camera_control_xub == block } { xn__proceduralcontains_camera_control_xub == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduraldicing_camera_control_orb"
        label   "procedural:dicing_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldicing_camera_neb"
        label   "Dicing Camera"
        type    oppath
        default { "" }
        disablewhen "{ xn__proceduraldicing_camera_control_orb == block } { xn__proceduraldicing_camera_control_orb == none }"
        parmtag { "oprelative" "." }
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }
    }
    parm {
        name    "xn__proceduraluse_reference_skin_file_control_y7b"
        label   "procedural:use_reference_skin_file"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraluse_reference_skin_file_xub"
        label   "Use Reference Skin File"
        type    toggle
        default { "0" }
        help    "Use a separate alembic reference skin file and asset path"
        disablewhen "{ xn__proceduraluse_reference_skin_file_control_y7b == block } { xn__proceduraluse_reference_skin_file_control_y7b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralreference_skin_file_control_g1b"
        label   "procedural:reference_skin_file"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralreference_skin_file_fob"
        label   "Reference Skin File"
        type    file
        default { "" }
        help    "Alembic file which includes the reference skin to attach the fur to"
        disablewhen "{ xn__proceduralreference_skin_file_control_g1b == block } { xn__proceduralreference_skin_file_control_g1b == none }"
        parmtag { "usdvaluetype" "asset" }
    }
    parm {
        name    "xn__proceduralreference_skin_asset_control_22b"
        label   "procedural:reference_skin_asset"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralreference_skin_asset_1pb"
        label   "Reference Skin Asset"
        type    string
        default { "" }
        disablewhen "{ xn__proceduralreference_skin_asset_control_22b == block } { xn__proceduralreference_skin_asset_control_22b == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralreverse_uv_winding_order_control_l9b"
        label   "procedural:reverse_uv_winding_order"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralreverse_uv_winding_order_kwb"
        label   "Reverse Uv Winding Order"
        type    toggle
        default { "0" }
        help    "If \"use_closest_point\" is false, this should help fix a mismatch between Houdini's and Moonray's UVs.  Turn on if the fur seems to be in the wrong location on the surface."
        disablewhen "{ xn__proceduralreverse_uv_winding_order_control_l9b == block } { xn__proceduralreverse_uv_winding_order_control_l9b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralclosest_surface_uv_distance_threshold_control_rvc"
        label   "procedural:closest_surface_uv_distance_threshold"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralclosest_surface_uv_distance_threshold_qic"
        label   "Closest Surface Uv Distance Threshold"
        type    float
        default { "100" }
        help    "Maximum allowable distance between curve and reference mesh surface for the closest_surface_uv primitive attribute"
        disablewhen "{ xn__proceduralclosest_surface_uv_distance_threshold_control_rvc == block } { xn__proceduralclosest_surface_uv_distance_threshold_control_rvc == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralasset_scale_control_fob"
        label   "procedural:asset_scale"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralasset_scale_ebb"
        label   "Asset Scale"
        type    vector
        size    3
        default { "1" "1" "1" }
        help    "Scales length and radius of curves based on asset scale"
        disablewhen "{ xn__proceduralasset_scale_control_fob == block } { xn__proceduralasset_scale_control_fob == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "vector3f" }
    }
    parm {
        name    "xn__proceduralcurved_motion_blur_sample_count_control_zlc"
        label   "procedural:curved_motion_blur_sample_count"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralcurved_motion_blur_sample_count_y7b"
        label   "Curved Motion Blur Sample Count"
        type    integer
        default { "2" }
        help    "Number of time samples generated along each curve when using curved motion blur"
        disablewhen "{ xn__proceduralcurved_motion_blur_sample_count_control_zlc == block } { xn__proceduralcurved_motion_blur_sample_count_control_zlc == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "int" }
    }
    parm {
        name    "xn__proceduralpart_list_control_5kb"
        label   "procedural:part_list"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "part_list"
        label    "Part List"
        default 0
        disablewhen "{ xn__proceduralpart_list_control_5kb == block } { xn__proceduralpart_list_control_5kb == none }"
        parmtag { "usdvaluetype" "string[]" }

        parm {
            name    "xn__proceduralpart_list_46a#"
            label   "Part List"
            type    string
            default { "" }
            help    "Ordered list of part names"
            parmtag { "moonray::is_parm" "1" }
        }
    }

    parm {
        name    "xn__proceduralprimitive_attributes_control_22b"
        label   "procedural:primitive_attributes"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "primitive_attributes"
        label    "Primitive Attributes"
        default 0
        disablewhen "{ xn__proceduralprimitive_attributes_control_22b == block } { xn__proceduralprimitive_attributes_control_22b == none }"
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }

        parm {
            name    "xn__proceduralprimitive_attributes_1pb#"
            label   "Primitive Attributes"
            type    oppath
            default { "" }
            help    "A list of UserData to specify arbitrary primitive attributes"
            parmtag { "moonray::is_parm" "1" }
            parmtag { "oprelative" "." }
        }
    }

    parm {
        name    "xn__proceduraluse_evaluation_frame_control_22b"
        label   "procedural:use_evaluation_frame"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraluse_evaluation_frame_1pb"
        label   "Use Evaluation Frame"
        type    toggle
        default { "0" }
        help    "uses \"evaluation frame\" instead of SceneVariables frame\n"
        disablewhen "{ xn__proceduraluse_evaluation_frame_control_22b == block } { xn__proceduraluse_evaluation_frame_control_22b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralevaluation_frame_control_kwb"
        label   "procedural:evaluation_frame"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralevaluation_frame_jjb"
        label   "Evaluation Frame"
        type    float
        default { "1" }
        help    "evaluate geometry at specified frame instead of SceneVariables frame\n"
        disablewhen "{ xn__proceduraluse_evaluation_frame_1pb != 1 } { xn__proceduralevaluation_frame_control_kwb == block } { xn__proceduralevaluation_frame_control_kwb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
}
