#include "$HFS/houdini/soho/parameters/CommonMacros.ds"
{
    name	parameters
    group {
        name    "folder"
        label   "Motion Guides"

        parm {
            name    "xn__proceduralapply_motion_guides_control_g1b"
            label   "procedural:apply_motion_guides"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralapply_motion_guides_fob"
            label   "Apply Motion Guides"
            type    toggle
            default { "0" }
            help    "Apply the motion guides to deform the fur"
            disablewhen "{ xn__proceduralapply_motion_guides_control_g1b == block } { xn__proceduralapply_motion_guides_control_g1b == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralmotion_guides_deformation_mode_control_dkc"
            label   "procedural:motion_guides_deformation_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_deformation_mode_c6b"
            label   "Motion Guides Deformation Mode"
            type    integer
            default { "2" }
            help    "Motion guides Deformation mode: 0 - Motion Interpolation,                                  1 - Position Interpolation, 2 - Position Wrap"
            disablewhen "{ xn__proceduralmotion_guides_deformation_mode_control_dkc == block } { xn__proceduralmotion_guides_deformation_mode_control_dkc == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "int" }
        }
        parm {
            name    "xn__proceduralmotion_guides_binding_mode_control_udc"
            label   "procedural:motion_guides_binding_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_binding_mode_tzb"
            label   "Motion Guides Binding Mode"
            type    integer
            default { "0" }
            help    "Motion guides hair binding mode: 0 - Tip Binding, 1 - Per-CV Binding"
            disablewhen "{ xn__proceduralmotion_guides_binding_mode_control_udc == block } { xn__proceduralmotion_guides_binding_mode_control_udc == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "int" }
        }
        parm {
            name    "xn__proceduralmotion_guides_file_control_tzb"
            label   "procedural:motion_guides_file"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_file_smb"
            label   "Motion Guides File"
            type    file
            default { "" }
            help    "Alembic file containing motion guides"
            disablewhen "{ xn__proceduralmotion_guides_file_control_tzb == block } { xn__proceduralmotion_guides_file_control_tzb == none }"
            parmtag { "usdvaluetype" "asset" }
        }
        parm {
            name    "xn__proceduralmotion_guides_node_path_control_y7b"
            label   "procedural:motion_guides_node_path"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_node_path_xub"
            label   "Motion Guides Node Path"
            type    string
            default { "" }
            help    "Path to the motion guides within the Alembic file"
            disablewhen "{ xn__proceduralmotion_guides_node_path_control_y7b == block } { xn__proceduralmotion_guides_node_path_control_y7b == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduralmotion_guides_connectivity_file_control_zlc"
            label   "procedural:motion_guides_connectivity_file"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_connectivity_file_y7b"
            label   "Motion Guides Connectivity File"
            type    file
            default { "" }
            help    "Alembic file containing motion guides connectivity mesh"
            disablewhen "{ xn__proceduralmotion_guides_connectivity_file_control_zlc == block } { xn__proceduralmotion_guides_connectivity_file_control_zlc == none }"
            parmtag { "usdvaluetype" "asset" }
        }
        parm {
            name    "xn__proceduralmotion_guides_connectivity_node_path_control_4tc"
            label   "procedural:motion_guides_connectivity_node_path"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_connectivity_node_path_3gc"
            label   "Motion Guides Connectivity Node Path"
            type    string
            default { "" }
            help    "Path to the connectivity data within the Alembic file"
            disablewhen "{ xn__proceduralmotion_guides_connectivity_node_path_control_4tc == block } { xn__proceduralmotion_guides_connectivity_node_path_control_4tc == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduralmotion_guides_max_distance_control_udc"
            label   "procedural:motion_guides_max_distance"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_max_distance_tzb"
            label   "Motion Guides Max Distance"
            type    float
            default { "0.1" }
            help    "Maximum allowable distance between fur curve and motion guides connectivity mesh"
            disablewhen "{ xn__proceduralmotion_guides_max_distance_control_udc == block } { xn__proceduralmotion_guides_max_distance_control_udc == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__proceduralmotion_guides_collision_track_control_qic"
            label   "procedural:motion_guides_collision_track"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_collision_track_p4b"
            label   "Motion Guides Collision Track"
            type    string
            default { "colliderDistance" }
            help    "Track on motion guide curves to control collision distance for 'wrap' mode"
            disablewhen "{ xn__proceduralmotion_guides_collision_track_control_qic == block } { xn__proceduralmotion_guides_collision_track_control_qic == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduralmotion_guides_collision_tolerance_control_8oc"
            label   "procedural:motion_guides_collision_tolerance"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmotion_guides_collision_tolerance_7bc"
            label   "Motion Guides Collision Tolerance"
            type    float
            default { "0" }
            help    "Tolerance < 0 allows penetration and > 0 forces a barrier space"
            disablewhen "{ xn__proceduralmotion_guides_collision_tolerance_control_8oc == block } { xn__proceduralmotion_guides_collision_tolerance_control_8oc == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
    }

    parm {
        name    "xn__procedurallabel_control_neb"
        label   "procedural:label"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__procedurallabel_m0a"
        label   "Label"
        type    string
        default { "" }
        help    "label used in material aov expresssions"
        disablewhen "{ xn__procedurallabel_control_neb == block } { xn__procedurallabel_control_neb == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralreferences_control_smb"
        label   "procedural:references"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "references"
        label    "References"
        default 0
        disablewhen "{ xn__proceduralreferences_control_smb == block } { xn__proceduralreferences_control_smb == none }"
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }

        parm {
            name    "xn__proceduralreferences_r8a#"
            label   "References"
            type    oppath
            default { "" }
            help    "list of geometries that geometry procedural can reference during procedural generate/update stages. For example, an instancer geometry procedural can instance primitives generated by the reference geometry procedural."
            parmtag { "moonray::is_parm" "1" }
            parmtag { "oprelative" "." }
        }
    }

    parm {
        name    "xn__proceduralstatic_control_9fb"
        label   "procedural:static"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralstatic_81a"
        label   "Static"
        type    toggle
        default { "1" }
        help    "disable if the geometry will be updated between frames"
        disablewhen "{ xn__proceduralstatic_control_9fb == block } { xn__proceduralstatic_control_9fb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralside_type_control_5kb"
        label   "procedural:side_type"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralside_type_46a"
        label   "Side Type"
        type    string
        default { "force two-sided" }
        help    "set single sidedness of the mesh, will affect the visibility of the mesh based on normal direction"
        disablewhen "{ xn__proceduralside_type_control_5kb == block } { xn__proceduralside_type_control_5kb == none }"
        menu {
            "force two-sided"       "Force Two-Sided"
            "force single-sided"    "Force Single-Sided"
            "use mesh sidedness"    "Use Mesh Sidedness"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduralreverse_normals_control_xub"
        label   "procedural:reverse_normals"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralreverse_normals_whb"
        label   "Reverse Normals"
        type    toggle
        default { "0" }
        help    "enable to reverse the normals in the geometry"
        disablewhen "{ xn__proceduralreverse_normals_control_xub == block } { xn__proceduralreverse_normals_control_xub == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_in_camera_control_6xb"
        label   "procedural:visible_in_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_in_camera_5kb"
        label   "Visible In Camera"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible to camera rays"
        disablewhen "{ xn__proceduralvisible_in_camera_control_6xb == block } { xn__proceduralvisible_in_camera_control_6xb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_shadow_control_btb"
        label   "procedural:visible_shadow"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_shadow_9fb"
        label   "Visible Shadow"
        type    toggle
        default { "1" }
        help    "whether the geometry casts shadows"
        disablewhen "{ xn__proceduralvisible_shadow_control_btb == block } { xn__proceduralvisible_shadow_control_btb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_reflection_control_udc"
        label   "procedural:visible_diffuse_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_reflection_tzb"
        label   "Visible Diffuse Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in diffuse reflection"
        disablewhen "{ xn__proceduralvisible_diffuse_reflection_control_udc == block } { xn__proceduralvisible_diffuse_reflection_control_udc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_transmission_control_3gc"
        label   "procedural:visible_diffuse_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_transmission_22b"
        label   "Visible Diffuse Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in diffuse transmission"
        disablewhen "{ xn__proceduralvisible_diffuse_transmission_control_3gc == block } { xn__proceduralvisible_diffuse_transmission_control_3gc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_glossy_reflection_control_7bc"
        label   "procedural:visible_glossy_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_glossy_reflection_6xb"
        label   "Visible Glossy Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in glossy reflection."
        disablewhen "{ xn__proceduralvisible_glossy_reflection_control_7bc == block } { xn__proceduralvisible_glossy_reflection_control_7bc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_glossy_transmission_control_hfc"
        label   "procedural:visible_glossy_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_glossy_transmission_g1b"
        label   "Visible Glossy Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in glossy transmission (refraction)."
        disablewhen "{ xn__proceduralvisible_glossy_transmission_control_hfc == block } { xn__proceduralvisible_glossy_transmission_control_hfc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_mirror_reflection_control_7bc"
        label   "procedural:visible_mirror_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_mirror_reflection_6xb"
        label   "Visible Mirror Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in miror reflection."
        disablewhen "{ xn__proceduralvisible_mirror_reflection_control_7bc == block } { xn__proceduralvisible_mirror_reflection_control_7bc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_mirror_transmission_control_hfc"
        label   "procedural:visible_mirror_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_mirror_transmission_g1b"
        label   "Visible Mirror Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in miror transmission (refraction)."
        disablewhen "{ xn__proceduralvisible_mirror_transmission_control_hfc == block } { xn__proceduralvisible_mirror_transmission_control_hfc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_volume_control_btb"
        label   "procedural:visible_volume"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_volume_9fb"
        label   "Visible Volume"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in indirect volume rays"
        disablewhen "{ xn__proceduralvisible_volume_control_btb == block } { xn__proceduralvisible_volume_control_btb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralray_epsilon_control_fob"
        label   "procedural:ray_epsilon"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralray_epsilon_ebb"
        label   "Ray Epsilon"
        type    float
        default { "0" }
        help    "When a secondary ray is fired, anything within this distance of the intersection point will be ignored.  Instead, it is considered part of the current intersection's geometry.  If zero, an automatically calculated epsilon will be used."
        disablewhen "{ xn__proceduralray_epsilon_control_fob == block } { xn__proceduralray_epsilon_control_fob == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralshadow_ray_epsilon_control_tzb"
        label   "procedural:shadow_ray_epsilon"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralshadow_ray_epsilon_smb"
        label   "Shadow Ray Epsilon"
        type    float
        default { "0" }
        help    "When a shadow ray is fired, anything within this distance of the intersection point will be ignored.  If this value is less than \"ray_epsilon\", then it has no additional effect."
        disablewhen "{ xn__proceduralshadow_ray_epsilon_control_tzb == block } { xn__proceduralshadow_ray_epsilon_control_tzb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralshadow_receiver_label_control_p4b"
        label   "procedural:shadow_receiver_label"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralshadow_receiver_label_orb"
        label   "Shadow Receiver Label"
        type    string
        default { "" }
        help    "Label used to associate Geometry objects into sets. Then, using the [\"shadow_exclusion_mappings\"] attribute, shadows from specified geometry parts can be suppressed from casting onto specified sets."
        disablewhen "{ xn__proceduralshadow_receiver_label_control_p4b == block } { xn__proceduralshadow_receiver_label_control_p4b == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralshadow_exclusion_mappings_control_7bc"
        label   "procedural:shadow_exclusion_mappings"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralshadow_exclusion_mappings_6xb"
        label   "Shadow Exclusion Mappings"
        type    string
        default { "" }
        help    "List of mappings of the form A:B where:\nA is a list of names of parts to be mapped, or asterisk to map the whole geometry\nB is a list of labels corresponding to the sets corresponding to distinct values of [\"shadow_receiver_label\"], or asterisk to map to all such sets."
        disablewhen "{ xn__proceduralshadow_exclusion_mappings_control_7bc == block } { xn__proceduralshadow_exclusion_mappings_control_7bc == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralcontains_camera_control_xub"
        label   "procedural:contains_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralcontains_camera_whb"
        label   "Contains Camera"
        type    toggle
        default { "0" }
        help    "Specifies whether the geometry contains the camera and should be used for IOR tracking. This should not be changed by the user -- they should instead attach the relevant geometry to the camera, which will then flag this geometry."
        disablewhen "{ xn__proceduralcontains_camera_control_xub == block } { xn__proceduralcontains_camera_control_xub == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduraldicing_camera_control_orb"
        label   "procedural:dicing_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldicing_camera_neb"
        label   "Dicing Camera"
        type    oppath
        default { "" }
        disablewhen "{ xn__proceduraldicing_camera_control_orb == block } { xn__proceduraldicing_camera_control_orb == none }"
        parmtag { "oprelative" "." }
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }
    }
    parm {
        name    "xn__proceduralmeshes_file_control_fob"
        label   "procedural:meshes_file"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralmeshes_file_ebb"
        label   "Meshes File"
        type    file
        default { "" }
        help    ".abc file with meshes to deform"
        disablewhen "{ xn__proceduralmeshes_file_control_fob == block } { xn__proceduralmeshes_file_control_fob == none }"
        parmtag { "usdvaluetype" "asset" }
    }
    parm {
        name    "xn__proceduralmeshes_path_control_fob"
        label   "procedural:meshes_path"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralmeshes_path_ebb"
        label   "Meshes Path"
        type    string
        default { "" }
        help    "Path in .abc file to the meshes to deform.  Uses first child of root if empty."
        disablewhen "{ xn__proceduralmeshes_path_control_fob == block } { xn__proceduralmeshes_path_control_fob == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralreference_curves_file_control_p4b"
        label   "procedural:reference_curves_file"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralreference_curves_file_orb"
        label   "Reference Curves File"
        type    file
        default { "" }
        help    ".abc file that contains one copy of the deformation curves in reference position"
        disablewhen "{ xn__proceduralreference_curves_file_control_p4b == block } { xn__proceduralreference_curves_file_control_p4b == none }"
        parmtag { "usdvaluetype" "asset" }
    }
    parm {
        name    "xn__proceduralreference_curves_path_control_p4b"
        label   "procedural:reference_curves_path"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralreference_curves_path_orb"
        label   "Reference Curves Path"
        type    string
        default { "" }
        help    "Path in .abc file to reference curves.  Uses first child of root if empty."
        disablewhen "{ xn__proceduralreference_curves_path_control_p4b == block } { xn__proceduralreference_curves_path_control_p4b == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduraldeformation_curves_file_control_y7b"
        label   "procedural:deformation_curves_file"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldeformation_curves_file_xub"
        label   "Deformation Curves File"
        type    file
        default { "" }
        help    ".abc file that contains one or more copies of the reference curves deformed and in world space"
        disablewhen "{ xn__proceduraldeformation_curves_file_control_y7b == block } { xn__proceduraldeformation_curves_file_control_y7b == none }"
        parmtag { "usdvaluetype" "asset" }
    }
    parm {
        name    "xn__proceduraldeformation_curves_path_control_y7b"
        label   "procedural:deformation_curves_path"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldeformation_curves_path_xub"
        label   "Deformation Curves Path"
        type    string
        default { "" }
        help    "Path in alembic file to deformation curves.  Uses first child of root if empty."
        disablewhen "{ xn__proceduraldeformation_curves_path_control_y7b == block } { xn__proceduraldeformation_curves_path_control_y7b == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralnormal_track_control_1pb"
        label   "procedural:normal_track"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralnormal_track_0cb"
        label   "Normal Track"
        type    string
        default { "curveN" }
        help    "Base name of the normal vector tracks on the reference/deformation curves (i.e. curveN_x, curveN_y, curveN_z)"
        disablewhen "{ xn__proceduralnormal_track_control_1pb == block } { xn__proceduralnormal_track_control_1pb == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduraltangent_track_control_orb"
        label   "procedural:tangent_track"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraltangent_track_neb"
        label   "Tangent Track"
        type    string
        default { "tangent" }
        help    "Base name of the tangent vector tracks on the reference/deformation curves (i.e. tangent_x, tangent_y, tangent_z)"
        disablewhen "{ xn__proceduraltangent_track_control_orb == block } { xn__proceduraltangent_track_control_orb == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralcopy_id_track_control_orb"
        label   "procedural:copy_id_track"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralcopy_id_track_neb"
        label   "Copy Id Track"
        type    string
        default { "id" }
        help    "Name of the id track on the deformation curves that represents the copy number"
        disablewhen "{ xn__proceduralcopy_id_track_control_orb == block } { xn__proceduralcopy_id_track_control_orb == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralguide_id_track_control_btb"
        label   "procedural:guide_id_track"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralguide_id_track_9fb"
        label   "Guide Id Track"
        type    string
        default { "branch_id" }
        help    "Name of the id track on the reference/deformation curves and mesh attribute that represents the guide number"
        disablewhen "{ xn__proceduralguide_id_track_control_btb == block } { xn__proceduralguide_id_track_control_btb == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralattributes_to_transfer_control_c6b"
        label   "procedural:attributes_to_transfer"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralattributes_to_transfer_btb"
        label   "Attributes To Transfer"
        type    string
        default { "" }
        help    "Comma separated list of attributes to transfer from the deformed curves to the mesh"
        disablewhen "{ xn__proceduralattributes_to_transfer_control_c6b == block } { xn__proceduralattributes_to_transfer_control_c6b == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduraluse_render_parts_control_kwb"
        label   "procedural:use_render_parts"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraluse_render_parts_jjb"
        label   "Use Render Parts"
        type    toggle
        default { "0" }
        help    "use render parts when true or raw parts when false"
        disablewhen "{ xn__proceduraluse_render_parts_control_kwb == block } { xn__proceduraluse_render_parts_control_kwb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralsubd_resolution_control_xub"
        label   "procedural:subd_resolution"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralsubd_resolution_whb"
        label   "Subd Resolution"
        type    float
        default { "2" }
        help    "The max resolution to tessellate a subdivision mesh. An edge on control face will be tessellated to at most n segments when \"subd resolution\" is set to n. If \"adaptive error\" is set to 0, every edge on control face will be uniformly tessellated to \"subd resolution\". Otherwise renderer will adaptively tessellate subdivision mesh control face based on camera information"
        disablewhen "{ xn__proceduralsubd_resolution_control_xub == block } { xn__proceduralsubd_resolution_control_xub == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralsubd_type_control_5kb"
        label   "procedural:subd_type"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralsubd_type_46a"
        label   "Subd Type"
        type    string
        default { "use mesh type" }
        help    "Subdivision type for PolygonMesh/SubdivisionMesh in alembic file.\n\"use mesh type\" will use the mesh scheme alembic file specifies.\n\"force polygon mesh\" will always resolve to PolygonMesh.\n\"force subdivision mesh\" will always resolve to SubdivisionMesh.\n"
        disablewhen "{ xn__proceduralsubd_type_control_5kb == block } { xn__proceduralsubd_type_control_5kb == none }"
        menu {
            "use mesh type"             "Use Mesh Type"
            "force polygon mesh"        "Force Polygon Mesh"
            "force subdivision mesh"    "Force Subdivision Mesh"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduraladaptive_error_control_btb"
        label   "procedural:adaptive_error"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraladaptive_error_9fb"
        label   "Adaptive Error"
        type    float
        default { "0" }
        help    "the maximum allowable difference in pixels for subdivison mesh adaptive tessellation (each final tessellated edge won't be longer than n pixels if adaptive error is set to n).A value of 0 disables adaptive tessellation, reverting to uniform tessellation, which sometimes is more stable in animation."
        disablewhen "{ xn__proceduraladaptive_error_control_btb == block } { xn__proceduraladaptive_error_control_btb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralapply_motion_blur_control_6xb"
        label   "procedural:apply_motion_blur"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralapply_motion_blur_5kb"
        label   "Apply Motion Blur"
        type    toggle
        default { "1" }
        help    "Apply motion blur to the deformed geometry"
        disablewhen "{ xn__proceduralapply_motion_blur_control_6xb == block } { xn__proceduralapply_motion_blur_control_6xb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralcopy_using_guide_ids_control_22b"
        label   "procedural:copy_using_guide_ids"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralcopy_using_guide_ids_1pb"
        label   "Copy Using Guide Ids"
        type    toggle
        default { "0" }
        help    "Use only the guide_id_track (not the copy_id_track) to determine which\nmeshes to bind to the deformation curves.  This mode requires that each\nmesh has the same guide id value for all of it's points."
        disablewhen "{ xn__proceduralcopy_using_guide_ids_control_22b == block } { xn__proceduralcopy_using_guide_ids_control_22b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduraluse_evaluation_frame_control_22b"
        label   "procedural:use_evaluation_frame"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraluse_evaluation_frame_1pb"
        label   "Use Evaluation Frame"
        type    toggle
        default { "0" }
        help    "uses \"evaluation frame\" instead of SceneVariables frame\n"
        disablewhen "{ xn__proceduraluse_evaluation_frame_control_22b == block } { xn__proceduraluse_evaluation_frame_control_22b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralevaluation_frame_control_kwb"
        label   "procedural:evaluation_frame"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralevaluation_frame_jjb"
        label   "Evaluation Frame"
        type    float
        default { "1" }
        help    "evaluate geometry at specified frame instead of SceneVariables frame\n"
        disablewhen "{ xn__proceduraluse_evaluation_frame_1pb != 1 } { xn__proceduralevaluation_frame_control_kwb == block } { xn__proceduralevaluation_frame_control_kwb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralpart_list_control_5kb"
        label   "procedural:part_list"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "part_list"
        label    "Part List"
        default 0
        disablewhen "{ xn__proceduralpart_list_control_5kb == block } { xn__proceduralpart_list_control_5kb == none }"
        parmtag { "usdvaluetype" "string[]" }

        parm {
            name    "xn__proceduralpart_list_46a#"
            label   "Part List"
            type    string
            default { "" }
            help    "Ordered list of part names"
            parmtag { "moonray::is_parm" "1" }
        }
    }

    parm {
        name    "xn__proceduralprimitive_attributes_control_22b"
        label   "procedural:primitive_attributes"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "primitive_attributes"
        label    "Primitive Attributes"
        default 0
        disablewhen "{ xn__proceduralprimitive_attributes_control_22b == block } { xn__proceduralprimitive_attributes_control_22b == none }"
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }

        parm {
            name    "xn__proceduralprimitive_attributes_1pb#"
            label   "Primitive Attributes"
            type    oppath
            default { "" }
            help    "A list of UserData to specify arbitrary primitive attributes"
            parmtag { "moonray::is_parm" "1" }
            parmtag { "oprelative" "." }
        }
    }

}
