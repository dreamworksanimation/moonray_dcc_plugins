#include "$HFS/houdini/soho/parameters/CommonMacros.ds"
{
    name	parameters
    group {
        name    "folder"
        label   "Curve"

        parm {
            name    "xn__proceduraltessellation_rate_control_6xb"
            label   "procedural:tessellation_rate"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraltessellation_rate_5kb"
            label   "Tessellation Rate"
            type    integer
            default { "4" }
            help    "Number of segments to split curve spans into"
            disablewhen "{ xn__proceduraltessellation_rate_control_6xb == block } { xn__proceduraltessellation_rate_control_6xb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "int" }
        }
    }

    parm {
        name    "xn__procedurallabel_control_neb"
        label   "procedural:label"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__procedurallabel_m0a"
        label   "Label"
        type    string
        default { "" }
        help    "label used in material aov expresssions"
        disablewhen "{ xn__procedurallabel_control_neb == block } { xn__procedurallabel_control_neb == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralreferences_control_smb"
        label   "procedural:references"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "references"
        label    "References"
        default 0
        disablewhen "{ xn__proceduralreferences_control_smb == block } { xn__proceduralreferences_control_smb == none }"
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }

        parm {
            name    "xn__proceduralreferences_r8a#"
            label   "References"
            type    oppath
            default { "" }
            help    "list of geometries that geometry procedural can reference during procedural generate/update stages. For example, an instancer geometry procedural can instance primitives generated by the reference geometry procedural."
            parmtag { "moonray::is_parm" "1" }
            parmtag { "oprelative" "." }
        }
    }

    parm {
        name    "xn__proceduralstatic_control_9fb"
        label   "procedural:static"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralstatic_81a"
        label   "Static"
        type    toggle
        default { "1" }
        help    "disable if the geometry will be updated between frames"
        disablewhen "{ xn__proceduralstatic_control_9fb == block } { xn__proceduralstatic_control_9fb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralside_type_control_5kb"
        label   "procedural:side_type"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralside_type_46a"
        label   "Side Type"
        type    string
        default { "force two-sided" }
        help    "set single sidedness of the mesh, will affect the visibility of the mesh based on normal direction"
        disablewhen "{ xn__proceduralside_type_control_5kb == block } { xn__proceduralside_type_control_5kb == none }"
        menu {
            "force two-sided"       "Force Two-Sided"
            "force single-sided"    "Force Single-Sided"
            "use mesh sidedness"    "Use Mesh Sidedness"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduralreverse_normals_control_xub"
        label   "procedural:reverse_normals"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralreverse_normals_whb"
        label   "Reverse Normals"
        type    toggle
        default { "0" }
        help    "enable to reverse the normals in the geometry"
        disablewhen "{ xn__proceduralreverse_normals_control_xub == block } { xn__proceduralreverse_normals_control_xub == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_in_camera_control_6xb"
        label   "procedural:visible_in_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_in_camera_5kb"
        label   "Visible In Camera"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible to camera rays"
        disablewhen "{ xn__proceduralvisible_in_camera_control_6xb == block } { xn__proceduralvisible_in_camera_control_6xb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_shadow_control_btb"
        label   "procedural:visible_shadow"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_shadow_9fb"
        label   "Visible Shadow"
        type    toggle
        default { "1" }
        help    "whether the geometry casts shadows"
        disablewhen "{ xn__proceduralvisible_shadow_control_btb == block } { xn__proceduralvisible_shadow_control_btb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_reflection_control_udc"
        label   "procedural:visible_diffuse_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_reflection_tzb"
        label   "Visible Diffuse Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in diffuse reflection"
        disablewhen "{ xn__proceduralvisible_diffuse_reflection_control_udc == block } { xn__proceduralvisible_diffuse_reflection_control_udc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_transmission_control_3gc"
        label   "procedural:visible_diffuse_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_transmission_22b"
        label   "Visible Diffuse Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in diffuse transmission"
        disablewhen "{ xn__proceduralvisible_diffuse_transmission_control_3gc == block } { xn__proceduralvisible_diffuse_transmission_control_3gc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_glossy_reflection_control_7bc"
        label   "procedural:visible_glossy_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_glossy_reflection_6xb"
        label   "Visible Glossy Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in glossy reflection."
        disablewhen "{ xn__proceduralvisible_glossy_reflection_control_7bc == block } { xn__proceduralvisible_glossy_reflection_control_7bc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_glossy_transmission_control_hfc"
        label   "procedural:visible_glossy_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_glossy_transmission_g1b"
        label   "Visible Glossy Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in glossy transmission (refraction)."
        disablewhen "{ xn__proceduralvisible_glossy_transmission_control_hfc == block } { xn__proceduralvisible_glossy_transmission_control_hfc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_mirror_reflection_control_7bc"
        label   "procedural:visible_mirror_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_mirror_reflection_6xb"
        label   "Visible Mirror Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in miror reflection."
        disablewhen "{ xn__proceduralvisible_mirror_reflection_control_7bc == block } { xn__proceduralvisible_mirror_reflection_control_7bc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_mirror_transmission_control_hfc"
        label   "procedural:visible_mirror_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_mirror_transmission_g1b"
        label   "Visible Mirror Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in miror transmission (refraction)."
        disablewhen "{ xn__proceduralvisible_mirror_transmission_control_hfc == block } { xn__proceduralvisible_mirror_transmission_control_hfc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_volume_control_btb"
        label   "procedural:visible_volume"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_volume_9fb"
        label   "Visible Volume"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in indirect volume rays"
        disablewhen "{ xn__proceduralvisible_volume_control_btb == block } { xn__proceduralvisible_volume_control_btb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralray_epsilon_control_fob"
        label   "procedural:ray_epsilon"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralray_epsilon_ebb"
        label   "Ray Epsilon"
        type    float
        default { "0" }
        help    "When a secondary ray is fired, anything within this distance of the intersection point will be ignored.  Instead, it is considered part of the current intersection's geometry.  If zero, an automatically calculated epsilon will be used."
        disablewhen "{ xn__proceduralray_epsilon_control_fob == block } { xn__proceduralray_epsilon_control_fob == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralshadow_ray_epsilon_control_tzb"
        label   "procedural:shadow_ray_epsilon"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralshadow_ray_epsilon_smb"
        label   "Shadow Ray Epsilon"
        type    float
        default { "0" }
        help    "When a shadow ray is fired, anything within this distance of the intersection point will be ignored.  If this value is less than \"ray_epsilon\", then it has no additional effect."
        disablewhen "{ xn__proceduralshadow_ray_epsilon_control_tzb == block } { xn__proceduralshadow_ray_epsilon_control_tzb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralshadow_receiver_label_control_p4b"
        label   "procedural:shadow_receiver_label"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralshadow_receiver_label_orb"
        label   "Shadow Receiver Label"
        type    string
        default { "" }
        help    "Label used to associate Geometry objects into sets. Then, using the [\"shadow_exclusion_mappings\"] attribute, shadows from specified geometry parts can be suppressed from casting onto specified sets."
        disablewhen "{ xn__proceduralshadow_receiver_label_control_p4b == block } { xn__proceduralshadow_receiver_label_control_p4b == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralshadow_exclusion_mappings_control_7bc"
        label   "procedural:shadow_exclusion_mappings"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralshadow_exclusion_mappings_6xb"
        label   "Shadow Exclusion Mappings"
        type    string
        default { "" }
        help    "List of mappings of the form A:B where:\nA is a list of names of parts to be mapped, or asterisk to map the whole geometry\nB is a list of labels corresponding to the sets corresponding to distinct values of [\"shadow_receiver_label\"], or asterisk to map to all such sets."
        disablewhen "{ xn__proceduralshadow_exclusion_mappings_control_7bc == block } { xn__proceduralshadow_exclusion_mappings_control_7bc == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralcontains_camera_control_xub"
        label   "procedural:contains_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralcontains_camera_whb"
        label   "Contains Camera"
        type    toggle
        default { "0" }
        help    "Specifies whether the geometry contains the camera and should be used for IOR tracking. This should not be changed by the user -- they should instead attach the relevant geometry to the camera, which will then flag this geometry."
        disablewhen "{ xn__proceduralcontains_camera_control_xub == block } { xn__proceduralcontains_camera_control_xub == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduraldicing_camera_control_orb"
        label   "procedural:dicing_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldicing_camera_neb"
        label   "Dicing Camera"
        type    oppath
        default { "" }
        disablewhen "{ xn__proceduraldicing_camera_control_orb == block } { xn__proceduraldicing_camera_control_orb == none }"
        parmtag { "oprelative" "." }
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }
    }
    parm {
        name    "xn__proceduralrider_file_control_smb"
        label   "procedural:rider_file"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralrider_file_r8a"
        label   "Rider File"
        type    file
        default { "" }
        help    "Alembic file with meshes, curves, or packed primitives to wrap deform"
        disablewhen "{ xn__proceduralrider_file_control_smb == block } { xn__proceduralrider_file_control_smb == none }"
        parmtag { "usdvaluetype" "asset" }
    }
    parm {
        name    "xn__proceduralrider_path_control_smb"
        label   "procedural:rider_path"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralrider_path_r8a"
        label   "Rider Path"
        type    string
        default { "" }
        help    "Path in .abc file to the meshes, curves, or packed primitives to deform."
        disablewhen "{ xn__proceduralrider_path_control_smb == block } { xn__proceduralrider_path_control_smb == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralmerge_rider_meshes_control_tzb"
        label   "procedural:merge_rider_meshes"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralmerge_rider_meshes_smb"
        label   "Merge Rider Meshes"
        type    toggle
        default { "0" }
        help    "If the rider_path points to an xform node, merge all of the meshes under it for better performance.   This feature is not compatible with per-part assingments"
        disablewhen "{ xn__proceduralmerge_rider_meshes_control_tzb == block } { xn__proceduralmerge_rider_meshes_control_tzb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduraldriver_ref_file_control_xub"
        label   "procedural:driver_ref_file"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldriver_ref_file_whb"
        label   "Driver Ref File"
        type    file
        default { "" }
        help    "File with the reference mesh to be used as the driver"
        disablewhen "{ xn__proceduraldriver_ref_file_control_xub == block } { xn__proceduraldriver_ref_file_control_xub == none }"
        parmtag { "usdvaluetype" "asset" }
    }
    parm {
        name    "xn__proceduraldriver_ref_path_control_xub"
        label   "procedural:driver_ref_path"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldriver_ref_path_whb"
        label   "Driver Ref Path"
        type    string
        default { "" }
        help    "Path to the reference mesh to be used as the driver"
        disablewhen "{ xn__proceduraldriver_ref_path_control_xub == block } { xn__proceduraldriver_ref_path_control_xub == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduraldriver_anim_file_control_kwb"
        label   "procedural:driver_anim_file"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldriver_anim_file_jjb"
        label   "Driver Anim File"
        type    file
        default { "" }
        help    "File containing the animated mesh that the wrapped geometry sticks to"
        disablewhen "{ xn__proceduraldriver_anim_file_control_kwb == block } { xn__proceduraldriver_anim_file_control_kwb == none }"
        parmtag { "usdvaluetype" "asset" }
    }
    parm {
        name    "xn__proceduraldriver_anim_path_control_kwb"
        label   "procedural:driver_anim_path"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldriver_anim_path_jjb"
        label   "Driver Anim Path"
        type    string
        default { "" }
        help    "Path to the animated mesh that the wrapped geometry sticks to"
        disablewhen "{ xn__proceduraldriver_anim_path_control_kwb == block } { xn__proceduraldriver_anim_path_control_kwb == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralapply_abc_transforms_control_22b"
        label   "procedural:apply_abc_transforms"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralapply_abc_transforms_1pb"
        label   "Apply Abc Transforms"
        type    toggle
        default { "0" }
        help    "Chooses whether to transform the rider and driver meshes by the transformation hierarchy in the Alembic file"
        disablewhen "{ xn__proceduralapply_abc_transforms_control_22b == block } { xn__proceduralapply_abc_transforms_control_22b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralclosest_point_search_control_22b"
        label   "procedural:closest_point_search"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralclosest_point_search_1pb"
        label   "Closest Point Search"
        type    string
        default { "" }
        help    "Name of the Vec3 attribute on the rider geometry used to override the bind position"
        disablewhen "{ xn__proceduralclosest_point_search_control_22b == block } { xn__proceduralclosest_point_search_control_22b == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralwrap_algorithm_control_btb"
        label   "procedural:wrap_algorithm"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralwrap_algorithm_9fb"
        label   "Wrap Algorithm"
        type    string
        default { "subdivision" }
        help    "how to interpret the MM mesh when evaluating the surface for \n finding closest points and geometric surface properties\n"
        disablewhen "{ xn__proceduralwrap_algorithm_control_btb == block } { xn__proceduralwrap_algorithm_control_btb == none }"
        menu {
            "subdivision"   "Subdivision"
            "polygon"       "Polygon"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduralposition_transform_control_tzb"
        label   "procedural:position_transform"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralposition_transform_smb"
        label   "Position Transform"
        type    string
        default { "raw" }
        help    "controls how rider geometry, that lies off of an open boundary of the driver geometry, behaves"
        disablewhen "{ xn__proceduralposition_transform_control_tzb == block } { xn__proceduralposition_transform_control_tzb == none }"
        menu {
            "raw"               "Raw"
            "normalized"        "Normalized"
            "orthonormalized"   "Orthonormalized"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduralvector_transform_control_kwb"
        label   "procedural:vector_transform"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvector_transform_jjb"
        label   "Vector Transform"
        type    string
        default { "raw" }
        help    "controls how the additional vector type attributes are deformed"
        disablewhen "{ xn__proceduralvector_transform_control_kwb == block } { xn__proceduralvector_transform_control_kwb == none }"
        menu {
            "raw"               "Raw"
            "normalized"        "Normalized"
            "orthonormalized"   "Orthonormalized"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduralmatrix_transform_control_kwb"
        label   "procedural:matrix_transform"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralmatrix_transform_jjb"
        label   "Matrix Transform"
        type    string
        default { "raw" }
        help    "controls how the orientations of rigid instances are deformed when rigid_instance_mode is on"
        disablewhen "{ xn__proceduralmatrix_transform_control_kwb == block } { xn__proceduralmatrix_transform_control_kwb == none }"
        menu {
            "raw"               "Raw"
            "normalized"        "Normalized"
            "orthonormalized"   "Orthonormalized"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduraltangent_vector_control_btb"
        label   "procedural:tangent_vector"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraltangent_vector_9fb"
        label   "Tangent Vector"
        type    float
        default { "0.5" }
        help    "blends between using the surface patch's S and T directions for the tangent vector used in the orthonormalized mode's basis"
        disablewhen "{ xn__proceduraltangent_vector_control_btb == block } { xn__proceduraltangent_vector_control_btb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralvector_attrs_control_1pb"
        label   "procedural:vector_attrs"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvector_attrs_0cb"
        label   "Vector Attrs"
        type    string
        default { "" }
        help    "allows you to have directional vectors attributes transformed by the wrap"
        disablewhen "{ xn__proceduralvector_attrs_control_1pb == block } { xn__proceduralvector_attrs_control_1pb == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralrider_bind_by_attr_control_tzb"
        label   "procedural:rider_bind_by_attr"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralrider_bind_by_attr_smb"
        label   "Rider Bind By Attr"
        type    string
        default { "" }
        help    "name of string attr on rider points that controls binding to driver faces"
        disablewhen "{ xn__proceduralrider_bind_by_attr_control_tzb == block } { xn__proceduralrider_bind_by_attr_control_tzb == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduraldriver_bind_by_attr_control_g1b"
        label   "procedural:driver_bind_by_attr"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldriver_bind_by_attr_fob"
        label   "Driver Bind By Attr"
        type    string
        default { "" }
        help    "name of string attr on driver faces that controls binding of rider points"
        disablewhen "{ xn__proceduraldriver_bind_by_attr_control_g1b == block } { xn__proceduraldriver_bind_by_attr_control_g1b == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduraldriver_bind_by_attr_mode_control_l9b"
        label   "procedural:driver_bind_by_attr_mode"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldriver_bind_by_attr_mode_kwb"
        label   "Driver Bind By Attr Mode"
        type    string
        default { "use driver_bind_by_attr string" }
        help    "Presents some common bind options for the driver mesh. Default behavior is to read the string attr passed to driver_bind_by_attr. Other choices will dynamically generate a new string attribute list from the driver mesh."
        disablewhen "{ xn__proceduraldriver_bind_by_attr_mode_control_l9b == block } { xn__proceduraldriver_bind_by_attr_mode_control_l9b == none }"
        menu {
            "use driver_bind_by_attr string"    "Use Driver_Bind_By_Attr String"
            "part"                              "Part"
            "udim"                              "Udim"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduralrigid_instance_mode_control_g1b"
        label   "procedural:rigid_instance_mode"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralrigid_instance_mode_fob"
        label   "Rigid Instance Mode"
        type    toggle
        default { "0" }
        help    "bind instanced primitives rigidly to driver"
        disablewhen "{ xn__proceduralrigid_instance_mode_control_g1b == block } { xn__proceduralrigid_instance_mode_control_g1b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduraluse_render_parts_control_kwb"
        label   "procedural:use_render_parts"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraluse_render_parts_jjb"
        label   "Use Render Parts"
        type    toggle
        default { "0" }
        help    "use render parts when true or raw parts when false"
        disablewhen "{ xn__proceduraluse_render_parts_control_kwb == block } { xn__proceduraluse_render_parts_control_kwb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralmesh_resolution_control_xub"
        label   "procedural:mesh_resolution"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralmesh_resolution_whb"
        label   "Mesh Resolution"
        type    float
        default { "2" }
        help    "The max resolution to tessellate a subdivision mesh. An edge on control face will be tessellated to at most n segments when \"subd resolution\" is set to n. If \"adaptive error\" is set to 0, every edge on control face will be uniformly tessellated to \"subd resolution\". Otherwise renderer will adaptively tessellate subdivision mesh control face based on camera information"
        disablewhen "{ xn__proceduralmesh_resolution_control_xub == block } { xn__proceduralmesh_resolution_control_xub == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralsubd_type_control_5kb"
        label   "procedural:subd_type"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralsubd_type_46a"
        label   "Subd Type"
        type    string
        default { "use mesh type" }
        help    "Subdivision type for PolygonMesh/SubdivisionMesh in alembic file.\n\"use mesh type\" will use the mesh scheme alembic file specifies.\n\"force polygon mesh\" will always resolve to PolygonMesh.\n\"force subdivision mesh\" will always resolve to SubdivisionMesh.\n"
        disablewhen "{ xn__proceduralsubd_type_control_5kb == block } { xn__proceduralsubd_type_control_5kb == none }"
        menu {
            "use mesh type"             "Use Mesh Type"
            "force polygon mesh"        "Force Polygon Mesh"
            "force subdivision mesh"    "Force Subdivision Mesh"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduraladaptive_error_control_btb"
        label   "procedural:adaptive_error"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraladaptive_error_9fb"
        label   "Adaptive Error"
        type    float
        default { "0" }
        help    "the maximum allowable difference in pixels for subdivison mesh adaptive tessellation (each final tessellated edge won't be longer than n pixels if adaptive error is set to n).A value of 0 disables adaptive tessellation, reverting to uniform tessellation, which sometimes is more stable in animation."
        disablewhen "{ xn__proceduraladaptive_error_control_btb == block } { xn__proceduraladaptive_error_control_btb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralradius_mult_control_fob"
        label   "procedural:radius_mult"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralradius_mult_ebb"
        label   "Radius Mult"
        type    float
        default { "1" }
        help    "Overall radius multiplier for points and curves"
        disablewhen "{ xn__proceduralradius_mult_control_fob == block } { xn__proceduralradius_mult_control_fob == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralbase_width_factor_control_6xb"
        label   "procedural:base_width_factor"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralbase_width_factor_5kb"
        label   "Base Width Factor"
        type    float
        default { "1" }
        help    "Radius multiplier at the base of deformed curves"
        disablewhen "{ xn__proceduralbase_width_factor_control_6xb == block } { xn__proceduralbase_width_factor_control_6xb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduraltip_width_factor_control_kwb"
        label   "procedural:tip_width_factor"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraltip_width_factor_jjb"
        label   "Tip Width Factor"
        type    float
        default { "1" }
        help    "Radius multiplier for the tip of deformed curves"
        disablewhen "{ xn__proceduraltip_width_factor_control_kwb == block } { xn__proceduraltip_width_factor_control_kwb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduraldensity_control_whb"
        label   "procedural:density"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldensity_v3a"
        label   "Density"
        type    float
        default { "1" }
        help    "Used to randomly cull the curves from the input set.   Lower values produce less of the original curves."
        disablewhen "{ xn__proceduraldensity_control_whb == block } { xn__proceduraldensity_control_whb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralapply_motion_blur_control_6xb"
        label   "procedural:apply_motion_blur"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralapply_motion_blur_5kb"
        label   "Apply Motion Blur"
        type    toggle
        default { "1" }
        help    "Apply motion blur to the wrapped geometry"
        disablewhen "{ xn__proceduralapply_motion_blur_control_6xb == block } { xn__proceduralapply_motion_blur_control_6xb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralcurves_type_control_fob"
        label   "procedural:curves_type"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralcurves_type_ebb"
        label   "Curves Type"
        type    string
        default { "force_bspline" }
        help    "Controls what type of curves are rendered.   abc uses the type set in the input abc file otherwise force curves to be specified type"
        disablewhen "{ xn__proceduralcurves_type_control_fob == block } { xn__proceduralcurves_type_control_fob == none }"
        menu {
            "use_abc_type"  "Use_Abc_Type"
            "force_linear"  "Force_Linear"
            "force_bspline" "Force_Bspline"
            "force_bezier"  "Force_Bezier"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduralcurves_subtype_control_btb"
        label   "procedural:curves_subtype"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralcurves_subtype_9fb"
        label   "Curves Subtype"
        type    string
        default { "ray_facing" }
        help    "Curves subtype is ray facing or round"
        disablewhen "{ xn__proceduralcurves_subtype_control_btb == block } { xn__proceduralcurves_subtype_control_btb == none }"
        menu {
            "ray_facing"    "Ray_Facing"
            "round"         "Round"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduraladd_mesh_ref_P_control_btb"
        label   "procedural:add_mesh_ref_P"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraladd_mesh_ref_P_9fb"
        label   "Add Mesh Ref P"
        type    toggle
        default { "0" }
        help    "Calculates and adds ref_P data to meshes if it doesn't exist"
        disablewhen "{ xn__proceduraladd_mesh_ref_P_control_btb == block } { xn__proceduraladd_mesh_ref_P_control_btb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralprewrap_scale_control_orb"
        label   "procedural:prewrap_scale"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralprewrap_scale_neb"
        label   "Prewrap Scale"
        type    float
        default { "1" }
        help    "Scales driver ref and rider geometry uniformly by the value provided before binding and deforming."
        disablewhen "{ xn__proceduralprewrap_scale_control_orb == block } { xn__proceduralprewrap_scale_control_orb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralpart_list_control_5kb"
        label   "procedural:part_list"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "part_list"
        label    "Part List"
        default 0
        disablewhen "{ xn__proceduralpart_list_control_5kb == block } { xn__proceduralpart_list_control_5kb == none }"
        parmtag { "usdvaluetype" "string[]" }

        parm {
            name    "xn__proceduralpart_list_46a#"
            label   "Part List"
            type    string
            default { "" }
            help    "Ordered list of part names"
            parmtag { "moonray::is_parm" "1" }
        }
    }

    parm {
        name    "xn__proceduralprimitive_attributes_control_22b"
        label   "procedural:primitive_attributes"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "primitive_attributes"
        label    "Primitive Attributes"
        default 0
        disablewhen "{ xn__proceduralprimitive_attributes_control_22b == block } { xn__proceduralprimitive_attributes_control_22b == none }"
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }

        parm {
            name    "xn__proceduralprimitive_attributes_1pb#"
            label   "Primitive Attributes"
            type    oppath
            default { "" }
            help    "A list of UserData to specify arbitrary primitive attributes"
            parmtag { "moonray::is_parm" "1" }
            parmtag { "oprelative" "." }
        }
    }

    parm {
        name    "xn__proceduraluse_evaluation_frame_control_22b"
        label   "procedural:use_evaluation_frame"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraluse_evaluation_frame_1pb"
        label   "Use Evaluation Frame"
        type    toggle
        default { "0" }
        help    "uses \"evaluation frame\" instead of SceneVariables frame\n"
        disablewhen "{ xn__proceduraluse_evaluation_frame_control_22b == block } { xn__proceduraluse_evaluation_frame_control_22b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralevaluation_frame_control_kwb"
        label   "procedural:evaluation_frame"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralevaluation_frame_jjb"
        label   "Evaluation Frame"
        type    float
        default { "1" }
        help    "evaluate geometry at specified frame instead of SceneVariables frame\n"
        disablewhen "{ xn__proceduraluse_evaluation_frame_1pb != 1 } { xn__proceduralevaluation_frame_control_kwb == block } { xn__proceduralevaluation_frame_control_kwb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
}
