#include "$HFS/houdini/soho/parameters/CommonMacros.ds"
{
    name	parameters
    group {
        name    "folder"
        label   "Curve"

        parm {
            name    "xn__proceduraltessellation_rate_control_6xb"
            label   "procedural:tessellation_rate"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraltessellation_rate_5kb"
            label   "Tessellation Rate"
            type    integer
            default { "4" }
            help    "Number of segments to split curve spans into"
            disablewhen "{ xn__proceduraltessellation_rate_control_6xb == block } { xn__proceduraltessellation_rate_control_6xb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "int" }
        }
    }

    group {
        name    "folder2"
        label   "Model"

        parm {
            name    "xn__proceduralhair_control_0cb"
            label   "procedural:hair"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralhair_zya"
            label   "Hair"
            type    file
            default { "" }
            help    "filename of a willow hair file"
            disablewhen "{ xn__proceduralhair_control_0cb == block } { xn__proceduralhair_control_0cb == none }"
            parmtag { "usdvaluetype" "asset" }
        }
        parm {
            name    "xn__proceduralreference_hair_control_btb"
            label   "procedural:reference_hair"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralreference_hair_9fb"
            label   "Reference Hair"
            type    file
            default { "" }
            help    "filename of the reference hair file"
            disablewhen "{ xn__proceduralreference_hair_control_btb == block } { xn__proceduralreference_hair_control_btb == none }"
            parmtag { "usdvaluetype" "asset" }
        }
        parm {
            name    "xn__proceduralalembic_subasset_path_control_p4b"
            label   "procedural:alembic_subasset_path"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralalembic_subasset_path_orb"
            label   "Alembic Subasset Path"
            type    string
            default { "" }
            disablewhen "{ xn__proceduralalembic_subasset_path_control_p4b == block } { xn__proceduralalembic_subasset_path_control_p4b == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduraluse_evaluation_frame_control_22b"
            label   "procedural:use_evaluation_frame"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraluse_evaluation_frame_1pb"
            label   "Use Evaluation Frame"
            type    toggle
            default { "0" }
            disablewhen "{ xn__proceduraluse_evaluation_frame_control_22b == block } { xn__proceduraluse_evaluation_frame_control_22b == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralevaluation_frame_control_kwb"
            label   "procedural:evaluation_frame"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralevaluation_frame_jjb"
            label   "Evaluation Frame"
            type    float
            default { "1" }
            disablewhen "{ xn__proceduralevaluation_frame_control_kwb == block } { xn__proceduralevaluation_frame_control_kwb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "double" }
        }
        parm {
            name    "xn__proceduralapply_motion_blur_control_6xb"
            label   "procedural:apply_motion_blur"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralapply_motion_blur_5kb"
            label   "Apply Motion Blur"
            type    toggle
            default { "1" }
            help    "Apply motion blur to the wrapped geometry"
            disablewhen "{ xn__proceduralapply_motion_blur_control_6xb == block } { xn__proceduralapply_motion_blur_control_6xb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
    }

    group {
        name    "folder3"
        label   "Curve Generation"

        parm {
            name    "xn__proceduralstyling_mode_control_1pb"
            label   "procedural:styling_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralstyling_mode_0cb"
            label   "Styling Mode"
            type    string
            default { "Full Styling" }
            help    "Allows use of custom styling chains; defaults to `Full Styling`"
            disablewhen "{ xn__proceduralstyling_mode_control_1pb == block } { xn__proceduralstyling_mode_control_1pb == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduralenable_styling_control_btb"
            label   "procedural:enable_styling"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralenable_styling_9fb"
            label   "Enable Styling"
            type    toggle
            default { "1" }
            help    "Enables stylers during generation"
            disablewhen "{ xn__proceduralenable_styling_control_btb == block } { xn__proceduralenable_styling_control_btb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralguides_only_control_fob"
            label   "procedural:guides_only"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralguides_only_ebb"
            label   "Guides Only"
            type    toggle
            default { "0" }
            help    "Curve generation only outputs guide curves"
            disablewhen "{ xn__proceduralguides_only_control_fob == block } { xn__proceduralguides_only_control_fob == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralmatch_cv_counts_override_control_l9b"
            label   "procedural:match_cv_counts_override"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmatch_cv_counts_override_kwb"
            label   "Match Cv Counts Override"
            type    toggle
            default { "0" }
            help    "If style option is present on geometry, override it"
            disablewhen "{ xn__proceduralmatch_cv_counts_override_control_l9b == block } { xn__proceduralmatch_cv_counts_override_control_l9b == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralmatch_cv_counts_control_xub"
            label   "procedural:match_cv_counts"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralmatch_cv_counts_whb"
            label   "Match Cv Counts"
            type    toggle
            default { "0" }
            help    "Automatically refit all curves to havethe same CV count (increases CVs to match curve with highest CV count)"
            disablewhen "{ xn__proceduralmatch_cv_counts_control_xub == block } { xn__proceduralmatch_cv_counts_control_xub == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralattributes_to_export_override_control_qic"
            label   "procedural:attributes_to_export_override"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralattributes_to_export_override_p4b"
            label   "Attributes To Export Override"
            type    toggle
            default { "0" }
            help    "If style option is present on geometry, override it"
            disablewhen "{ xn__proceduralattributes_to_export_override_control_qic == block } { xn__proceduralattributes_to_export_override_control_qic == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralattributes_to_export_control_22b"
            label   "procedural:attributes_to_export"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralattributes_to_export_1pb"
            label   "Attributes To Export"
            type    string
            default { "" }
            help    "list of non-standard attributes from the Willow data to includeseparated by spaces"
            disablewhen "{ xn__proceduralattributes_to_export_control_22b == block } { xn__proceduralattributes_to_export_control_22b == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduralkeep_set_list_control_orb"
            label   "procedural:keep_set_list"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralkeep_set_list_neb"
            label   "Keep Set List"
            type    string
            default { "" }
            help    "Space-separated list of pattern string tokens.  Each follicle's set name is tested against each token with an fnsearch/glob style pattern matching check"
            disablewhen "{ xn__proceduralkeep_set_list_control_orb == block } { xn__proceduralkeep_set_list_control_orb == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduralremove_curve_sets_pattern_override_control_vqc"
            label   "procedural:remove_curve_sets_pattern_override"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralremove_curve_sets_pattern_override_udc"
            label   "Remove Curve Sets Pattern Override"
            type    toggle
            default { "0" }
            help    "If style option is present on geometry, override it"
            disablewhen "{ xn__proceduralremove_curve_sets_pattern_override_control_vqc == block } { xn__proceduralremove_curve_sets_pattern_override_control_vqc == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralremove_curve_sets_pattern_control_7bc"
            label   "procedural:remove_curve_sets_pattern"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralremove_curve_sets_pattern_6xb"
            label   "Remove Curve Sets Pattern"
            type    string
            default { "" }
            help    "glob pattern to match \"remove_curve_sets\" attribute on curves. Any curves with matching values will be removed after generation. If 'invert remove curves' is TRUE, non-matching curves will be removed."
            disablewhen "{ xn__proceduralremove_curve_sets_pattern_control_7bc == block } { xn__proceduralremove_curve_sets_pattern_control_7bc == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__proceduralinvert_remove_curves_override_control_qic"
            label   "procedural:invert_remove_curves_override"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralinvert_remove_curves_override_p4b"
            label   "Invert Remove Curves Override"
            type    toggle
            default { "0" }
            help    "If style option is present on geometry, override it"
            disablewhen "{ xn__proceduralinvert_remove_curves_override_control_qic == block } { xn__proceduralinvert_remove_curves_override_control_qic == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralinvert_remove_curves_control_22b"
            label   "procedural:invert_remove_curves"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralinvert_remove_curves_1pb"
            label   "Invert Remove Curves"
            type    toggle
            default { "0" }
            help    "inverts the use of 'remove curve sets pattern"
            disablewhen "{ xn__proceduralinvert_remove_curves_control_22b == block } { xn__proceduralinvert_remove_curves_control_22b == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduraldensity_factor_override_control_y7b"
            label   "procedural:density_factor_override"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraldensity_factor_override_xub"
            label   "Density Factor Override"
            type    toggle
            default { "0" }
            help    "If style option is present on geometry, override it"
            disablewhen "{ xn__proceduraldensity_factor_override_control_y7b == block } { xn__proceduraldensity_factor_override_control_y7b == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduraldensity_factor_control_btb"
            label   "procedural:density_factor"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraldensity_factor_9fb"
            label   "Density Factor"
            type    float
            default { "1" }
            disablewhen "{ xn__proceduraldensity_factor_control_btb == block } { xn__proceduraldensity_factor_control_btb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "double" }
        }
        parm {
            name    "xn__proceduralwidth_factor_control_1pb"
            label   "procedural:width_factor"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralwidth_factor_0cb"
            label   "Width Factor"
            type    float
            default { "1" }
            help    "Multiplies the hair width specified in the file"
            disablewhen "{ xn__proceduralwidth_factor_control_1pb == block } { xn__proceduralwidth_factor_control_1pb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "double" }
        }
        parm {
            name    "xn__proceduralbase_width_factor_control_6xb"
            label   "procedural:base_width_factor"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralbase_width_factor_5kb"
            label   "Base Width Factor"
            type    float
            default { "1" }
            help    "Works with the 'tip width factor' to modify the width specified in the file along the length of each hair curve"
            disablewhen "{ xn__proceduralbase_width_factor_control_6xb == block } { xn__proceduralbase_width_factor_control_6xb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "double" }
        }
        parm {
            name    "xn__proceduraltip_width_factor_control_kwb"
            label   "procedural:tip_width_factor"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraltip_width_factor_jjb"
            label   "Tip Width Factor"
            type    float
            default { "1" }
            help    "Works with the 'base width factor' to modify the width specified in the file along the length of each hair curve"
            disablewhen "{ xn__proceduraltip_width_factor_control_kwb == block } { xn__proceduraltip_width_factor_control_kwb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "double" }
        }
        parm {
            name    "xn__proceduralrefine_level_override_control_p4b"
            label   "procedural:refine_level_override"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralrefine_level_override_orb"
            label   "Refine Level Override"
            type    toggle
            default { "0" }
            help    "If style option is present on geometry, override it"
            disablewhen "{ xn__proceduralrefine_level_override_control_p4b == block } { xn__proceduralrefine_level_override_control_p4b == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralrefine_level_control_1pb"
            label   "procedural:refine_level"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralrefine_level_0cb"
            label   "Refine Level"
            type    integer
            default { "0" }
            disablewhen "{ xn__proceduralrefine_level_control_1pb == block } { xn__proceduralrefine_level_control_1pb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "int" }
        }
        parm {
            name    "xn__proceduralhigh_resolution_reference_positions_override_control_56c"
            label   "procedural:high_resolution_reference_positions_override"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralhigh_resolution_reference_positions_override_4tc"
            label   "High Resolution Reference Positions Override"
            type    toggle
            default { "0" }
            help    "If style option is present on geometry, override it"
            disablewhen "{ xn__proceduralhigh_resolution_reference_positions_override_control_56c == block } { xn__proceduralhigh_resolution_reference_positions_override_control_56c == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralhigh_resolution_reference_positions_control_isc"
            label   "procedural:high_resolution_reference_positions"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralhigh_resolution_reference_positions_hfc"
            label   "High Resolution Reference Positions"
            type    toggle
            default { "0" }
            help    "Use high resolution reference positions in stylers (Note: Slower)."
            disablewhen "{ xn__proceduralhigh_resolution_reference_positions_control_isc == block } { xn__proceduralhigh_resolution_reference_positions_control_isc == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralthread_chunk_size_override_control_udc"
            label   "procedural:thread_chunk_size_override"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralthread_chunk_size_override_tzb"
            label   "Thread Chunk Size Override"
            type    toggle
            default { "0" }
            help    "If style option is present on geometry, override it"
            disablewhen "{ xn__proceduralthread_chunk_size_override_control_udc == block } { xn__proceduralthread_chunk_size_override_control_udc == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralthread_chunk_size_control_6xb"
            label   "procedural:thread_chunk_size"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralthread_chunk_size_5kb"
            label   "Thread Chunk Size"
            type    integer
            default { "500" }
            disablewhen "{ xn__proceduralthread_chunk_size_control_6xb == block } { xn__proceduralthread_chunk_size_control_6xb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "int" }
        }
        parm {
            name    "xn__proceduralwrap_guides_override_control_22b"
            label   "procedural:wrap_guides_override"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralwrap_guides_override_1pb"
            label   "Wrap Guides Override"
            type    toggle
            default { "0" }
            help    "If style option is present on geometry, override it"
            disablewhen "{ xn__proceduralwrap_guides_override_control_22b == block } { xn__proceduralwrap_guides_override_control_22b == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralwrap_guides_control_fob"
            label   "procedural:wrap_guides"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralwrap_guides_ebb"
            label   "Wrap Guides"
            type    toggle
            default { "0" }
            help    "wraps curves to an animated scalp"
            disablewhen "{ xn__proceduralwrap_guides_control_fob == block } { xn__proceduralwrap_guides_control_fob == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralvalidate_input_control_btb"
            label   "procedural:validate_input"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralvalidate_input_9fb"
            label   "Validate Input"
            type    toggle
            default { "0" }
            help    "Validate input data scanning for NaN, INF, and other invalid numerical data.  Basic validation still happens even if this is false.   Try turning this on if the results look wrong."
            disablewhen "{ xn__proceduralvalidate_input_control_btb == block } { xn__proceduralvalidate_input_control_btb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
    }

    group {
        name    "folder4"
        label   "Driver Mesh"

        parm {
            name    "xn__proceduraldriver_reference_file_control_p4b"
            label   "procedural:driver_reference_file"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraldriver_reference_file_orb"
            label   "Driver Reference File"
            type    file
            default { "" }
            help    "Alembic file containing reference driver mesh to use for generating animated skin"
            disablewhen "{ xn__proceduraldriver_reference_file_control_p4b == block } { xn__proceduraldriver_reference_file_control_p4b == none }"
            parmtag { "usdvaluetype" "asset" }
        }
        parm {
            name    "xn__proceduraldriver_reference_subasset_path_control_dkc"
            label   "procedural:driver_reference_subasset_path"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduraldriver_reference_subasset_path_c6b"
            label   "Driver Reference Subasset Path"
            type    string
            default { "" }
            disablewhen "{ xn__proceduraldriver_reference_subasset_path_control_dkc == block } { xn__proceduraldriver_reference_subasset_path_control_dkc == none }"
            parmtag { "usdvaluetype" "string" }
        }
    }

    group {
        name    "folder5"
        label   "Log"

        parm {
            name    "xn__proceduralshow_info_messages_control_tzb"
            label   "procedural:show_info_messages"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralshow_info_messages_smb"
            label   "Show Info Messages"
            type    toggle
            default { "1" }
            help    "show info messages from willow 2 library"
            disablewhen "{ xn__proceduralshow_info_messages_control_tzb == block } { xn__proceduralshow_info_messages_control_tzb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralshow_warning_messages_control_p4b"
            label   "procedural:show_warning_messages"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralshow_warning_messages_orb"
            label   "Show Warning Messages"
            type    toggle
            default { "1" }
            help    "show warning messages from willow 2 library"
            disablewhen "{ xn__proceduralshow_warning_messages_control_p4b == block } { xn__proceduralshow_warning_messages_control_p4b == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralshow_error_messages_control_g1b"
            label   "procedural:show_error_messages"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralshow_error_messages_fob"
            label   "Show Error Messages"
            type    toggle
            default { "1" }
            help    "show error messages from willow 2 library"
            disablewhen "{ xn__proceduralshow_error_messages_control_g1b == block } { xn__proceduralshow_error_messages_control_g1b == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__proceduralshorten_messages_control_kwb"
            label   "procedural:shorten_messages"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__proceduralshorten_messages_jjb"
            label   "Shorten Messages"
            type    toggle
            default { "1" }
            help    "group duplicate messages from willow 2 library and display as one short message"
            disablewhen "{ xn__proceduralshorten_messages_control_kwb == block } { xn__proceduralshorten_messages_control_kwb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
    }

    parm {
        name    "xn__procedurallabel_control_neb"
        label   "procedural:label"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__procedurallabel_m0a"
        label   "Label"
        type    string
        default { "" }
        help    "label used in material aov expresssions"
        disablewhen "{ xn__procedurallabel_control_neb == block } { xn__procedurallabel_control_neb == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralreferences_control_smb"
        label   "procedural:references"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "references"
        label    "References"
        default 0
        disablewhen "{ xn__proceduralreferences_control_smb == block } { xn__proceduralreferences_control_smb == none }"
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }

        parm {
            name    "xn__proceduralreferences_r8a#"
            label   "References"
            type    oppath
            default { "" }
            help    "list of geometries that geometry procedural can reference during procedural generate/update stages. For example, an instancer geometry procedural can instance primitives generated by the reference geometry procedural."
            parmtag { "moonray::is_parm" "1" }
            parmtag { "oprelative" "." }
        }
    }

    parm {
        name    "xn__proceduralstatic_control_9fb"
        label   "procedural:static"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralstatic_81a"
        label   "Static"
        type    toggle
        default { "1" }
        help    "disable if the geometry will be updated between frames"
        disablewhen "{ xn__proceduralstatic_control_9fb == block } { xn__proceduralstatic_control_9fb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralside_type_control_5kb"
        label   "procedural:side_type"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralside_type_46a"
        label   "Side Type"
        type    string
        default { "force two-sided" }
        help    "set single sidedness of the mesh, will affect the visibility of the mesh based on normal direction"
        disablewhen "{ xn__proceduralside_type_control_5kb == block } { xn__proceduralside_type_control_5kb == none }"
        menu {
            "force two-sided"       "Force Two-Sided"
            "force single-sided"    "Force Single-Sided"
            "use mesh sidedness"    "Use Mesh Sidedness"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduralreverse_normals_control_xub"
        label   "procedural:reverse_normals"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralreverse_normals_whb"
        label   "Reverse Normals"
        type    toggle
        default { "0" }
        help    "enable to reverse the normals in the geometry"
        disablewhen "{ xn__proceduralreverse_normals_control_xub == block } { xn__proceduralreverse_normals_control_xub == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_in_camera_control_6xb"
        label   "procedural:visible_in_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_in_camera_5kb"
        label   "Visible In Camera"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible to camera rays"
        disablewhen "{ xn__proceduralvisible_in_camera_control_6xb == block } { xn__proceduralvisible_in_camera_control_6xb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_shadow_control_btb"
        label   "procedural:visible_shadow"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_shadow_9fb"
        label   "Visible Shadow"
        type    toggle
        default { "1" }
        help    "whether the geometry casts shadows"
        disablewhen "{ xn__proceduralvisible_shadow_control_btb == block } { xn__proceduralvisible_shadow_control_btb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_reflection_control_udc"
        label   "procedural:visible_diffuse_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_reflection_tzb"
        label   "Visible Diffuse Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in diffuse reflection"
        disablewhen "{ xn__proceduralvisible_diffuse_reflection_control_udc == block } { xn__proceduralvisible_diffuse_reflection_control_udc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_transmission_control_3gc"
        label   "procedural:visible_diffuse_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_diffuse_transmission_22b"
        label   "Visible Diffuse Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in diffuse transmission"
        disablewhen "{ xn__proceduralvisible_diffuse_transmission_control_3gc == block } { xn__proceduralvisible_diffuse_transmission_control_3gc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_glossy_reflection_control_7bc"
        label   "procedural:visible_glossy_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_glossy_reflection_6xb"
        label   "Visible Glossy Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in glossy reflection."
        disablewhen "{ xn__proceduralvisible_glossy_reflection_control_7bc == block } { xn__proceduralvisible_glossy_reflection_control_7bc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_glossy_transmission_control_hfc"
        label   "procedural:visible_glossy_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_glossy_transmission_g1b"
        label   "Visible Glossy Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in glossy transmission (refraction)."
        disablewhen "{ xn__proceduralvisible_glossy_transmission_control_hfc == block } { xn__proceduralvisible_glossy_transmission_control_hfc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_mirror_reflection_control_7bc"
        label   "procedural:visible_mirror_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_mirror_reflection_6xb"
        label   "Visible Mirror Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in miror reflection."
        disablewhen "{ xn__proceduralvisible_mirror_reflection_control_7bc == block } { xn__proceduralvisible_mirror_reflection_control_7bc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_mirror_transmission_control_hfc"
        label   "procedural:visible_mirror_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_mirror_transmission_g1b"
        label   "Visible Mirror Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in miror transmission (refraction)."
        disablewhen "{ xn__proceduralvisible_mirror_transmission_control_hfc == block } { xn__proceduralvisible_mirror_transmission_control_hfc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralvisible_volume_control_btb"
        label   "procedural:visible_volume"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralvisible_volume_9fb"
        label   "Visible Volume"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in indirect volume rays"
        disablewhen "{ xn__proceduralvisible_volume_control_btb == block } { xn__proceduralvisible_volume_control_btb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralray_epsilon_control_fob"
        label   "procedural:ray_epsilon"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralray_epsilon_ebb"
        label   "Ray Epsilon"
        type    float
        default { "0" }
        help    "When a secondary ray is fired, anything within this distance of the intersection point will be ignored.  Instead, it is considered part of the current intersection's geometry.  If zero, an automatically calculated epsilon will be used."
        disablewhen "{ xn__proceduralray_epsilon_control_fob == block } { xn__proceduralray_epsilon_control_fob == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralshadow_ray_epsilon_control_tzb"
        label   "procedural:shadow_ray_epsilon"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralshadow_ray_epsilon_smb"
        label   "Shadow Ray Epsilon"
        type    float
        default { "0" }
        help    "When a shadow ray is fired, anything within this distance of the intersection point will be ignored.  If this value is less than \"ray_epsilon\", then it has no additional effect."
        disablewhen "{ xn__proceduralshadow_ray_epsilon_control_tzb == block } { xn__proceduralshadow_ray_epsilon_control_tzb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__proceduralshadow_receiver_label_control_p4b"
        label   "procedural:shadow_receiver_label"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralshadow_receiver_label_orb"
        label   "Shadow Receiver Label"
        type    string
        default { "" }
        help    "Label used to associate Geometry objects into sets. Then, using the [\"shadow_exclusion_mappings\"] attribute, shadows from specified geometry parts can be suppressed from casting onto specified sets."
        disablewhen "{ xn__proceduralshadow_receiver_label_control_p4b == block } { xn__proceduralshadow_receiver_label_control_p4b == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralshadow_exclusion_mappings_control_7bc"
        label   "procedural:shadow_exclusion_mappings"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralshadow_exclusion_mappings_6xb"
        label   "Shadow Exclusion Mappings"
        type    string
        default { "" }
        help    "List of mappings of the form A:B where:\nA is a list of names of parts to be mapped, or asterisk to map the whole geometry\nB is a list of labels corresponding to the sets corresponding to distinct values of [\"shadow_receiver_label\"], or asterisk to map to all such sets."
        disablewhen "{ xn__proceduralshadow_exclusion_mappings_control_7bc == block } { xn__proceduralshadow_exclusion_mappings_control_7bc == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__proceduralcontains_camera_control_xub"
        label   "procedural:contains_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralcontains_camera_whb"
        label   "Contains Camera"
        type    toggle
        default { "0" }
        help    "Specifies whether the geometry contains the camera and should be used for IOR tracking. This should not be changed by the user -- they should instead attach the relevant geometry to the camera, which will then flag this geometry."
        disablewhen "{ xn__proceduralcontains_camera_control_xub == block } { xn__proceduralcontains_camera_control_xub == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduraldicing_camera_control_orb"
        label   "procedural:dicing_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldicing_camera_neb"
        label   "Dicing Camera"
        type    oppath
        default { "" }
        disablewhen "{ xn__proceduraldicing_camera_control_orb == block } { xn__proceduraldicing_camera_control_orb == none }"
        parmtag { "oprelative" "." }
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }
    }
    parm {
        name    "xn__proceduraladd_reference_positions_control_y7b"
        label   "procedural:add_reference_positions"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraladd_reference_positions_xub"
        label   "Add Reference Positions"
        type    toggle
        default { "1" }
        disablewhen "{ xn__proceduraladd_reference_positions_control_y7b == block } { xn__proceduraladd_reference_positions_control_y7b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__proceduralpart_list_control_5kb"
        label   "procedural:part_list"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "part_list"
        label    "Part List"
        default 0
        disablewhen "{ xn__proceduralpart_list_control_5kb == block } { xn__proceduralpart_list_control_5kb == none }"
        parmtag { "usdvaluetype" "string[]" }

        parm {
            name    "xn__proceduralpart_list_46a#"
            label   "Part List"
            type    string
            default { "" }
            help    "Ordered list of part names"
            parmtag { "moonray::is_parm" "1" }
        }
    }

    parm {
        name    "xn__proceduralprimitive_attributes_control_22b"
        label   "procedural:primitive_attributes"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "primitive_attributes"
        label    "Primitive Attributes"
        default 0
        disablewhen "{ xn__proceduralprimitive_attributes_control_22b == block } { xn__proceduralprimitive_attributes_control_22b == none }"
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }

        parm {
            name    "xn__proceduralprimitive_attributes_1pb#"
            label   "Primitive Attributes"
            type    oppath
            default { "" }
            help    "A list of UserData to specify arbitrary primitive attributes"
            parmtag { "moonray::is_parm" "1" }
            parmtag { "oprelative" "." }
        }
    }

    parm {
        name    "xn__proceduralcurves_type_control_fob"
        label   "procedural:curves_type"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralcurves_type_ebb"
        label   "Curves Type"
        type    string
        default { "bspline" }
        help    "Controls what type of curves are rendered."
        disablewhen "{ xn__proceduralcurves_type_control_fob == block } { xn__proceduralcurves_type_control_fob == none }"
        menu {
            "linear"    "Linear"
            "bspline"   "Bspline"
            "bezier"    "Bezier"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduralcurves_subtype_control_btb"
        label   "procedural:curves_subtype"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduralcurves_subtype_9fb"
        label   "Curves Subtype"
        type    string
        default { "ray_facing" }
        help    "Curves subtype is ray facing or round"
        disablewhen "{ xn__proceduralcurves_subtype_control_btb == block } { xn__proceduralcurves_subtype_control_btb == none }"
        menu {
            "ray_facing"    "Ray_Facing"
            "round"         "Round"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__proceduraldriver_animated_file_control_22b"
        label   "procedural:driver_animated_file"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldriver_animated_file_1pb"
        label   "Driver Animated File"
        type    file
        default { "" }
        help    "Alembic file containing animated driver mesh to use for generating animated skin"
        disablewhen "{ xn__proceduraldriver_animated_file_control_22b == block } { xn__proceduraldriver_animated_file_control_22b == none }"
        parmtag { "usdvaluetype" "asset" }
    }
    parm {
        name    "xn__proceduraldriver_animated_subasset_path_control_qic"
        label   "procedural:driver_animated_subasset_path"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__proceduraldriver_animated_subasset_path_p4b"
        label   "Driver Animated Subasset Path"
        type    string
        default { "" }
        disablewhen "{ xn__proceduraldriver_animated_subasset_path_control_qic == block } { xn__proceduraldriver_animated_subasset_path_control_qic == none }"
        parmtag { "usdvaluetype" "string" }
    }
}
