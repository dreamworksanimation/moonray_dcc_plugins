#include "$HFS/houdini/soho/parameters/CommonMacros.ds"
{
    name	parameters
    parm {
        name    "xn__moonraylabel_control_o8a"
        label   "moonray:label"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonraylabel_nva"
        label   "Label"
        type    string
        default { "" }
        help    "label used in material aov expresssions"
        disablewhen "{ xn__moonraylabel_control_o8a == block } { xn__moonraylabel_control_o8a == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__moonrayreferences_control_thb"
        label   "moonray:references"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "references"
        label    "References"
        default 0
        disablewhen "{ xn__moonrayreferences_control_thb == block } { xn__moonrayreferences_control_thb == none }"
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }

        parm {
            name    "xn__moonrayreferences_s3a#"
            label   "References"
            type    oppath
            default { "" }
            help    "list of geometries that geometry procedural can reference during procedural generate/update stages. For example, an instancer geometry procedural can instance primitives generated by the reference geometry procedural."
            parmtag { "moonray::is_parm" "1" }
            parmtag { "oprelative" "." }
        }
    }

    parm {
        name    "xn__moonraystatic_control_bbb"
        label   "moonray:static"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonraystatic_9wa"
        label   "Static"
        type    toggle
        default { "1" }
        help    "disable if the geometry will be updated between frames"
        disablewhen "{ xn__moonraystatic_control_bbb == block } { xn__moonraystatic_control_bbb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonrayside_type_control_6fb"
        label   "moonray:side_type"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayside_type_51a"
        label   "Side Type"
        type    string
        default { "force two-sided" }
        help    "set single sidedness of the mesh, will affect the visibility of the mesh based on normal direction"
        disablewhen "{ xn__moonrayside_type_control_6fb == block } { xn__moonrayside_type_control_6fb == none }"
        menu {
            "force two-sided"       "Force Two-Sided"
            "force single-sided"    "Force Single-Sided"
            "use mesh sidedness"    "Use Mesh Sidedness"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__moonrayreverse_normals_control_ypb"
        label   "moonray:reverse_normals"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayreverse_normals_xcb"
        label   "Reverse Normals"
        type    toggle
        default { "0" }
        help    "enable to reverse the normals in the geometry"
        disablewhen "{ xn__moonrayreverse_normals_control_ypb == block } { xn__moonrayreverse_normals_control_ypb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonrayvisible_in_camera_control_7sb"
        label   "moonray:visible_in_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayvisible_in_camera_6fb"
        label   "Visible In Camera"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible to camera rays"
        disablewhen "{ xn__moonrayvisible_in_camera_control_7sb == block } { xn__moonrayvisible_in_camera_control_7sb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonrayvisible_shadow_control_cob"
        label   "moonray:visible_shadow"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayvisible_shadow_bbb"
        label   "Visible Shadow"
        type    toggle
        default { "1" }
        help    "whether the geometry casts shadows"
        disablewhen "{ xn__moonrayvisible_shadow_control_cob == block } { xn__moonrayvisible_shadow_control_cob == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonrayvisible_diffuse_reflection_control_v7b"
        label   "moonray:visible_diffuse_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayvisible_diffuse_reflection_uub"
        label   "Visible Diffuse Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in diffuse reflection"
        disablewhen "{ xn__moonrayvisible_diffuse_reflection_control_v7b == block } { xn__moonrayvisible_diffuse_reflection_control_v7b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonrayvisible_diffuse_transmission_control_4bc"
        label   "moonray:visible_diffuse_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayvisible_diffuse_transmission_3xb"
        label   "Visible Diffuse Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in diffuse transmission"
        disablewhen "{ xn__moonrayvisible_diffuse_transmission_control_4bc == block } { xn__moonrayvisible_diffuse_transmission_control_4bc == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonrayvisible_glossy_reflection_control_85b"
        label   "moonray:visible_glossy_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayvisible_glossy_reflection_7sb"
        label   "Visible Glossy Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in glossy reflection."
        disablewhen "{ xn__moonrayvisible_glossy_reflection_control_85b == block } { xn__moonrayvisible_glossy_reflection_control_85b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonrayvisible_glossy_transmission_control_i9b"
        label   "moonray:visible_glossy_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayvisible_glossy_transmission_hwb"
        label   "Visible Glossy Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in glossy transmission (refraction)."
        disablewhen "{ xn__moonrayvisible_glossy_transmission_control_i9b == block } { xn__moonrayvisible_glossy_transmission_control_i9b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonrayvisible_mirror_reflection_control_85b"
        label   "moonray:visible_mirror_reflection"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayvisible_mirror_reflection_7sb"
        label   "Visible Mirror Reflection"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in miror reflection."
        disablewhen "{ xn__moonrayvisible_mirror_reflection_control_85b == block } { xn__moonrayvisible_mirror_reflection_control_85b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonrayvisible_mirror_transmission_control_i9b"
        label   "moonray:visible_mirror_transmission"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayvisible_mirror_transmission_hwb"
        label   "Visible Mirror Transmission"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in miror transmission (refraction)."
        disablewhen "{ xn__moonrayvisible_mirror_transmission_control_i9b == block } { xn__moonrayvisible_mirror_transmission_control_i9b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonrayvisible_volume_control_cob"
        label   "moonray:visible_volume"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayvisible_volume_bbb"
        label   "Visible Volume"
        type    toggle
        default { "1" }
        help    "whether the geometry is visible in indirect volume rays"
        disablewhen "{ xn__moonrayvisible_volume_control_cob == block } { xn__moonrayvisible_volume_control_cob == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonrayray_epsilon_control_gjb"
        label   "moonray:ray_epsilon"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayray_epsilon_f5a"
        label   "Ray Epsilon"
        type    float
        default { "0" }
        help    "When a secondary ray is fired, anything within this distance of the intersection point will be ignored.  Instead, it is considered part of the current intersection's geometry.  If zero, an automatically calculated epsilon will be used."
        disablewhen "{ xn__moonrayray_epsilon_control_gjb == block } { xn__moonrayray_epsilon_control_gjb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__moonrayshadow_ray_epsilon_control_uub"
        label   "moonray:shadow_ray_epsilon"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayshadow_ray_epsilon_thb"
        label   "Shadow Ray Epsilon"
        type    float
        default { "0" }
        help    "When a shadow ray is fired, anything within this distance of the intersection point will be ignored.  If this value is less than \"ray_epsilon\", then it has no additional effect."
        disablewhen "{ xn__moonrayshadow_ray_epsilon_control_uub == block } { xn__moonrayshadow_ray_epsilon_control_uub == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__moonrayshadow_receiver_label_control_qzb"
        label   "moonray:shadow_receiver_label"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayshadow_receiver_label_pmb"
        label   "Shadow Receiver Label"
        type    string
        default { "" }
        help    "Label used to associate Geometry objects into sets. Then, using the [\"shadow_exclusion_mappings\"] attribute, shadows from specified geometry parts can be suppressed from casting onto specified sets."
        disablewhen "{ xn__moonrayshadow_receiver_label_control_qzb == block } { xn__moonrayshadow_receiver_label_control_qzb == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__moonrayshadow_exclusion_mappings_control_85b"
        label   "moonray:shadow_exclusion_mappings"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayshadow_exclusion_mappings_7sb"
        label   "Shadow Exclusion Mappings"
        type    string
        default { "" }
        help    "List of mappings of the form A:B where:\nA is a list of names of parts to be mapped, or asterisk to map the whole geometry\nB is a list of labels corresponding to the sets corresponding to distinct values of [\"shadow_receiver_label\"], or asterisk to map to all such sets."
        disablewhen "{ xn__moonrayshadow_exclusion_mappings_control_85b == block } { xn__moonrayshadow_exclusion_mappings_control_85b == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__moonraycontains_camera_control_ypb"
        label   "moonray:contains_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonraycontains_camera_xcb"
        label   "Contains Camera"
        type    toggle
        default { "0" }
        help    "Specifies whether the geometry contains the camera and should be used for IOR tracking. This should not be changed by the user -- they should instead attach the relevant geometry to the camera, which will then flag this geometry."
        disablewhen "{ xn__moonraycontains_camera_control_ypb == block } { xn__moonraycontains_camera_control_ypb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonraydicing_camera_control_pmb"
        label   "moonray:dicing_camera"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonraydicing_camera_o8a"
        label   "Dicing Camera"
        type    oppath
        default { "" }
        disablewhen "{ xn__moonraydicing_camera_control_pmb == block } { xn__moonraydicing_camera_control_pmb == none }"
        parmtag { "oprelative" "." }
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }
    }
    parm {
        name    "xn__moonrayvertices_by_index_control_7sb"
        label   "moonray:vertices_by_index"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "vertices_by_index"
        label    "Vertices By Index"
        default 0
        disablewhen "{ xn__moonrayvertices_by_index_control_7sb == block } { xn__moonrayvertices_by_index_control_7sb == none }"
        parmtag { "usdvaluetype" "int[]" }

        parm {
            name    "xn__moonrayvertices_by_index_6fb#"
            label   "Vertices By Index"
            type    integer
            default { "0" }
            help    "Ordered list of vertex indices used to construct the mesh using the vertex list"
            range   { 0 10 }
            parmtag { "moonray::is_parm" "1" }
        }
    }

    parm {
        name    "xn__moonrayface_vertex_count_control_7sb"
        label   "moonray:face_vertex_count"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "face_vertex_count"
        label    "Face Vertex Count"
        default 0
        disablewhen "{ xn__moonrayface_vertex_count_control_7sb == block } { xn__moonrayface_vertex_count_control_7sb == none }"
        parmtag { "usdvaluetype" "int[]" }

        parm {
            name    "xn__moonrayface_vertex_count_6fb#"
            label   "Face Vertex Count"
            type    integer
            default { "0" }
            help    "Ordered list of vertices per face, used in conjection with vertices by index to construct the mesh"
            range   { 0 10 }
            parmtag { "moonray::is_parm" "1" }
        }
    }

    parm {
        name    "xn__moonrayorientation_control_gjb"
        label   "moonray:orientation"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayorientation_f5a"
        label   "Orientation"
        type    string
        default { "right-handed" }
        help    "When set to \"left-handed\", normals are generated using the left-handed rule. This reverses the direction of generated normals, and which side of surfaces is considered the front, without affecting supplied normals."
        disablewhen "{ xn__moonrayorientation_control_gjb == block } { xn__moonrayorientation_control_gjb == none }"
        menu {
            "right-handed"  "Right-Handed"
            "left-handed"   "Left-Handed"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__moonraypart_list_control_6fb"
        label   "moonray:part_list"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "part_list"
        label    "Part List"
        default 0
        disablewhen "{ xn__moonraypart_list_control_6fb == block } { xn__moonraypart_list_control_6fb == none }"
        parmtag { "usdvaluetype" "string[]" }

        parm {
            name    "xn__moonraypart_list_51a#"
            label   "Part List"
            type    string
            default { "" }
            help    "Ordered list of part names, used in conjunction with 'part face count list' and 'part faces indicies' to assign per-part materials"
            parmtag { "moonray::is_parm" "1" }
        }
    }

    parm {
        name    "xn__moonraypart_face_count_list_control_3xb"
        label   "moonray:part_face_count_list"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "part_face_count_list"
        label    "Part Face Count List"
        default 0
        disablewhen "{ xn__moonraypart_face_count_list_control_3xb == block } { xn__moonraypart_face_count_list_control_3xb == none }"
        parmtag { "usdvaluetype" "int[]" }

        parm {
            name    "xn__moonraypart_face_count_list_2kb#"
            label   "Part Face Count List"
            type    integer
            default { "0" }
            help    "The number of faces belonging to the part with corresponding index in 'part list'."
            range   { 0 10 }
            parmtag { "moonray::is_parm" "1" }
        }
    }

    parm {
        name    "xn__moonraypart_face_indices_control_7sb"
        label   "moonray:part_face_indices"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "part_face_indices"
        label    "Part Face Indices"
        default 0
        disablewhen "{ xn__moonraypart_face_indices_control_7sb == block } { xn__moonraypart_face_indices_control_7sb == none }"
        parmtag { "usdvaluetype" "int[]" }

        parm {
            name    "xn__moonraypart_face_indices_6fb#"
            label   "Part Face Indices"
            type    integer
            default { "0" }
            help    "Ordered list of face indices. No index should have a value greater than the size of 'face vertex count'"
            range   { 0 10 }
            parmtag { "moonray::is_parm" "1" }
        }
    }

    parm {
        name    "xn__moonrayvelocity_scale_control_cob"
        label   "moonray:velocity_scale"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayvelocity_scale_bbb"
        label   "Velocity Scale"
        type    float
        default { "1" }
        help    "Adjust magnitude of velocity-based motion blur"
        disablewhen "{ xn__moonrayvelocity_scale_control_cob == block } { xn__moonrayvelocity_scale_control_cob == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__moonrayis_subd_control_xcb"
        label   "moonray:is_subd"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayis_subd_wya"
        label   "Is Subd"
        type    toggle
        default { "1" }
        help    "If true, a SubdivisionMesh primitive will be created - PolygonMesh otherwise"
        disablewhen "{ xn__moonrayis_subd_control_xcb == block } { xn__moonrayis_subd_control_xcb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonraysubd_scheme_control_gjb"
        label   "moonray:subd_scheme"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonraysubd_scheme_f5a"
        label   "Subd Scheme"
        type    string
        default { "catclark" }
        help    "CatClark or Bilinear"
        disablewhen "{ xn__moonraysubd_scheme_control_gjb == block } { xn__moonraysubd_scheme_control_gjb == none }"
        menu {
            "bilinear"  "Bilinear"
            "catclark"  "Catclark"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__moonraysubd_boundary_control_pmb"
        label   "moonray:subd_boundary"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonraysubd_boundary_o8a"
        label   "Subd Boundary"
        type    string
        default { "edge and corner" }
        help    "Boundary interpolation: Corners, Edges or None"
        disablewhen "{ xn__moonraysubd_boundary_control_pmb == block } { xn__moonraysubd_boundary_control_pmb == none }"
        menu {
            "none"              "None"
            "edge only"         "Edge Only"
            "edge and corner"   "Edge And Corner"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__moonraysubd_fvar_linear_control_lrb"
        label   "moonray:subd_fvar_linear"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonraysubd_fvar_linear_keb"
        label   "Subd Fvar Linear"
        type    string
        default { "corners only" }
        help    "Face-varying linear interpolation: None, Corners Only, Corners Plus 1 or Plus 2 (RenderMan), Boundaries, or All"
        disablewhen "{ xn__moonraysubd_fvar_linear_control_lrb == block } { xn__moonraysubd_fvar_linear_control_lrb == none }"
        menu {
            "none"          "None"
            "corners only"  "Corners Only"
            "corners plus1" "Corners Plus1"
            "corners plus2" "Corners Plus2"
            "boundaries"    "Boundaries"
            "all"           "All"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__moonraysubd_crease_indices_control_hwb"
        label   "moonray:subd_crease_indices"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "subd_crease_indices"
        label    "Subd Crease Indices"
        default 0
        disablewhen "{ xn__moonraysubd_crease_indices_control_hwb == block } { xn__moonraysubd_crease_indices_control_hwb == none }"
        parmtag { "usdvaluetype" "int[]" }

        parm {
            name    "xn__moonraysubd_crease_indices_gjb#"
            label   "Subd Crease Indices"
            type    integer
            default { "0" }
            help    "List of vertex index pairs for each crease edge with an assigned sharpness."
            range   { 0 10 }
            parmtag { "moonray::is_parm" "1" }
        }
    }

    parm {
        name    "xn__moonraysubd_crease_sharpnesses_control_z2b"
        label   "moonray:subd_crease_sharpnesses"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "subd_crease_sharpnesses"
        label    "Subd Crease Sharpnesses"
        default 0
        disablewhen "{ xn__moonraysubd_crease_sharpnesses_control_z2b == block } { xn__moonraysubd_crease_sharpnesses_control_z2b == none }"
        parmtag { "usdvaluetype" "float[]" }

        parm {
            name    "xn__moonraysubd_crease_sharpnesses_ypb#"
            label   "Subd Crease Sharpnesses"
            type    float
            default { "0" }
            help    "Sharpness value for each crease edge."
            range   { 0 10 }
            parmtag { "moonray::is_parm" "1" }
        }
    }

    parm {
        name    "xn__moonraysubd_corner_indices_control_hwb"
        label   "moonray:subd_corner_indices"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "subd_corner_indices"
        label    "Subd Corner Indices"
        default 0
        disablewhen "{ xn__moonraysubd_corner_indices_control_hwb == block } { xn__moonraysubd_corner_indices_control_hwb == none }"
        parmtag { "usdvaluetype" "int[]" }

        parm {
            name    "xn__moonraysubd_corner_indices_gjb#"
            label   "Subd Corner Indices"
            type    integer
            default { "0" }
            help    "List of indices for each corner vertex with an assigned sharpness."
            range   { 0 10 }
            parmtag { "moonray::is_parm" "1" }
        }
    }

    parm {
        name    "xn__moonraysubd_corner_sharpnesses_control_z2b"
        label   "moonray:subd_corner_sharpnesses"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "subd_corner_sharpnesses"
        label    "Subd Corner Sharpnesses"
        default 0
        disablewhen "{ xn__moonraysubd_corner_sharpnesses_control_z2b == block } { xn__moonraysubd_corner_sharpnesses_control_z2b == none }"
        parmtag { "usdvaluetype" "float[]" }

        parm {
            name    "xn__moonraysubd_corner_sharpnesses_ypb#"
            label   "Subd Corner Sharpnesses"
            type    float
            default { "0" }
            help    "Sharpness value for each corner vertex."
            range   { 0 10 }
            parmtag { "moonray::is_parm" "1" }
        }
    }

    parm {
        name    "xn__moonrayprimitive_attributes_control_3xb"
        label   "moonray:primitive_attributes"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    multiparm {
        name    "primitive_attributes"
        label    "Primitive Attributes"
        default 0
        disablewhen "{ xn__moonrayprimitive_attributes_control_3xb == block } { xn__moonrayprimitive_attributes_control_3xb == none }"
        parmtag { "usdvaluetype" "<class 'pxr.Usd.Relationship'>" }

        parm {
            name    "xn__moonrayprimitive_attributes_2kb#"
            label   "Primitive Attributes"
            type    oppath
            default { "" }
            help    "Vector of UserData.Each key/value pair will be added as a primitive attribute of the mesh."
            parmtag { "moonray::is_parm" "1" }
            parmtag { "oprelative" "." }
        }
    }

    parm {
        name    "xn__moonraymesh_resolution_control_ypb"
        label   "moonray:mesh_resolution"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonraymesh_resolution_xcb"
        label   "Mesh Resolution"
        type    float
        default { "2" }
        help    "The maximum resolution to tessellate a mesh. An edge on input face will be tessellated to at most n segments when \"mesh resolution\" is set to n. If \"adaptive error\" is set to 0, every edge on input face will be uniformly tessellated to \"mesh resolution\". Otherwise renderer will adaptively tessellate mesh based on camera information"
        disablewhen "{ xn__moonraymesh_resolution_control_ypb == block } { xn__moonraymesh_resolution_control_ypb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__moonrayadaptive_error_control_cob"
        label   "moonray:adaptive_error"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayadaptive_error_bbb"
        label   "Adaptive Error"
        type    float
        default { "0" }
        help    "the maximum allowable difference in pixels for subdivison mesh adaptive tessellation (each final tessellated edge won't be longer than n pixels if adaptive error is set to n).A value of 0 disables adaptive tessellation, reverting to uniform tessellation, which sometimes is more stable in animation.Adaptive tessellation is not supported for instances."
        disablewhen "{ xn__moonrayadaptive_error_control_cob == block } { xn__moonrayadaptive_error_control_cob == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
    parm {
        name    "xn__moonraysmooth_normal_control_pmb"
        label   "moonray:smooth_normal"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonraysmooth_normal_o8a"
        label   "Smooth Normal"
        type    toggle
        default { "1" }
        help    "generate smooth shading normal when rendering PolygonMesh and the mesh doesn't provide shading normal itself"
        disablewhen "{ xn__moonraysmooth_normal_control_pmb == block } { xn__moonraysmooth_normal_control_pmb == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonrayuse_rotation_motion_blur_control_m4b"
        label   "moonray:use_rotation_motion_blur"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayuse_rotation_motion_blur_lrb"
        label   "Use Rotation Motion Blur"
        type    toggle
        default { "0" }
        help    "if \"xform\" is time varying and motion blur is turned on, Turning on this toggle can generate better rotation trail. Known limitation: turning on this toggle will disable adaptive tessellation"
        disablewhen "{ xn__moonrayuse_rotation_motion_blur_control_m4b == block } { xn__moonrayuse_rotation_motion_blur_control_m4b == none }"
        parmtag { "usdvaluetype" "bool" }
    }
    parm {
        name    "xn__moonraymotion_blur_type_control_lrb"
        label   "moonray:motion_blur_type"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonraymotion_blur_type_keb"
        label   "Motion Blur Type"
        type    string
        default { "best" }
        help    "Motion blur type for PolygonMesh/Points/Curves in alembic file.\n\"static\" will treat the mesh as static.\n\"velocity\" will blur using the supplied vertex positions and velocities.\n\"frame delta\" will interpolate between the two supplied vertex positions.\n\"acceleration\" will blur using the supplied vertex positions, velocities and accelerations.\n\"hermite\" will use supplied pair of positions and pair of velocities to interpolate along a cubic Hermite curve.\n\"best\" will use choose the method which provides the highest quality given the available data.\n"
        disablewhen "{ xn__moonraymotion_blur_type_control_lrb == block } { xn__moonraymotion_blur_type_control_lrb == none }"
        menu {
            "best"          "Best"
            "static"        "Static"
            "velocity"      "Velocity"
            "frame delta"   "Frame Delta"
            "acceleration"  "Acceleration"
            "hermite"       "Hermite"
        }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__moonraycurved_motion_blur_sample_count_control_0gc"
        label   "moonray:curved_motion_blur_sample_count"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonraycurved_motion_blur_sample_count_z2b"
        label   "Curved Motion Blur Sample Count"
        type    integer
        default { "10" }
        help    "Number of time samples generated along each curve when using curved motion blur"
        disablewhen "{ xn__moonraycurved_motion_blur_sample_count_control_0gc == block } { xn__moonraycurved_motion_blur_sample_count_control_0gc == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "int" }
    }
    parm {
        name    "xn__moonrayprimitive_attribute_frame_control_85b"
        label   "moonray:primitive_attribute_frame"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__moonrayprimitive_attribute_frame_7sb"
        label   "Primitive Attribute Frame"
        type    string
        default { "both motion steps" }
        help    "Which frame(s) do we take the primitive attributes from?\n	O : first motion step\n	1 : second motion step\n	2 : both motion steps"
        disablewhen "{ xn__moonrayprimitive_attribute_frame_control_85b == block } { xn__moonrayprimitive_attribute_frame_control_85b == none }"
        menu {
            "first motion step"     "First Motion Step"
            "second motion step"    "Second Motion Step"
            "both motion steps"     "Both Motion Steps"
        }
        parmtag { "usdvaluetype" "token" }
    }
}
