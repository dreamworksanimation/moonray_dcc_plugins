#include "$HFS/houdini/soho/parameters/CommonMacros.ds"
{
    name	parameters
    group {
        name    "folder"
        label   "Advanced"

        parm {
            name    "xn__inputsfallback_bssrdf_control_bob"
            label   "inputs:fallback_bssrdf"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_bssrdf_99a"
            label   "Fallback Bssrdf"
            type    string
            default { "normalized diffusion" }
            help    "If child materials disagree on the type of bssrdf, this type will be used instead."
            disablewhen "{ xn__inputsfallback_bssrdf_control_bob == block } { xn__inputsfallback_bssrdf_control_bob == none }"
            menu {
                "normalized diffusion"  "Normalized Diffusion"
                "dipole"                "Dipole"
                "random walk"           "Random Walk"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputsfallback_specular_model_control_c1b"
            label   "inputs:fallback_specular_model"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_specular_model_bob"
            label   "Fallback Specular Model"
            type    string
            default { "GGX" }
            help    "If child materials disagree on the type of specular model, this type will be used instead."
            disablewhen "{ xn__inputsfallback_specular_model_control_c1b == block } { xn__inputsfallback_specular_model_control_c1b == none }"
            menu {
                "Beckmann"  "Beckmann"
                "GGX"       "GGX"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputsfallback_toon_specular_model_control_h9b"
            label   "inputs:fallback_toon_specular_model"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_toon_specular_model_gwb"
            label   "Fallback Toon Specular Model"
            type    string
            default { "GGX" }
            help    "If child materials disagree on the type of toon specular model, this type will be used instead."
            disablewhen "{ xn__inputsfallback_toon_specular_model_control_h9b == block } { xn__inputsfallback_toon_specular_model_control_h9b == none }"
            menu {
                "Beckmann"  "Beckmann"
                "GGX"       "GGX"
                "Toon"      "Toon"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputsfallback_outer_specular_model_control_3bc"
            label   "inputs:fallback_outer_specular_model"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_outer_specular_model_2xb"
            label   "Fallback Outer Specular Model"
            type    string
            default { "GGX" }
            help    "If child materials disagree on the type of outer specular model, this type will be used instead."
            disablewhen "{ xn__inputsfallback_outer_specular_model_control_3bc == block } { xn__inputsfallback_outer_specular_model_control_3bc == none }"
            menu {
                "Beckmann"  "Beckmann"
                "GGX"       "GGX"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputsfallback_clearcoat_use_bending_control_qdc"
            label   "inputs:fallback_clearcoat_use_bending"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_clearcoat_use_bending_pzb"
            label   "Fallback Clearcoat Use Bending"
            type    toggle
            default { "1" }
            help    "If child materials disagree on the type of clearcoat use bending, this type will be used instead."
            disablewhen "{ xn__inputsfallback_clearcoat_use_bending_control_qdc == block } { xn__inputsfallback_clearcoat_use_bending_control_qdc == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__inputsfallback_thin_geometry_control_pzb"
            label   "inputs:fallback_thin_geometry"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_thin_geometry_omb"
            label   "Fallback Thin Geometry"
            type    toggle
            default { "1" }
            help    "If child materials disagree on the type of thin geometry, this type will be used instead."
            disablewhen "{ xn__inputsfallback_thin_geometry_control_pzb == block } { xn__inputsfallback_thin_geometry_control_pzb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__inputsblend_color_space_control_krb"
            label   "inputs:blend_color_space"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsblend_color_space_jeb"
            label   "Blend Color Space"
            type    string
            default { "RGB" }
            help    "Color space used when blending the two material's color parameters"
            disablewhen "{ xn__inputsblend_color_space_control_krb == block } { xn__inputsblend_color_space_control_krb == none }"
            menu {
                "RGB"   "RGB"
                "HSV"   "HSV"
                "HSL"   "HSL"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputssss_trace_set_control_1kb"
            label   "inputs:sss_trace_set"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputssss_trace_set_06a"
            label   "Sss Trace Set"
            type    oppath
            default { "" }
            help    "By default, only the geometry associated with this material contributes to subsurface. The DwaLayerMaterial ignores the sss trace sets of the submaterials. If you want adjacent geometry with different material to contribute as well, specify all those parts here."
            disablewhen "{ xn__inputssss_trace_set_control_1kb == block } { xn__inputssss_trace_set_control_1kb == none }"
            parmtag { "oprelative" "." }
            parmtag { "usdvaluetype" "token" }
        }
    }

    group {
        name    "folder2"
        label   "Glitter Fallback"

        parm {
            name    "xn__inputsfallback_glitter_seed_control_2xb"
            label   "inputs:fallback_glitter_seed"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_glitter_seed_1kb"
            label   "Fallback Glitter Seed"
            type    integer
            default { "0" }
            help    "The seed for the glitter random number generator.  This parameter will only be used when layering two distinct glitter materials."
            disablewhen "{ xn__inputsfallback_glitter_seed_control_2xb == block } { xn__inputsfallback_glitter_seed_control_2xb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "int" }
        }
        parm {
            name    "xn__inputsfallback_glitter_space_control_pzb"
            label   "inputs:fallback_glitter_space"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_glitter_space_omb"
            label   "Fallback Glitter Space"
            type    string
            default { "reference" }
            help    "The space to calculate the worley noise in, defaults to reference space.  This parameter will only be used when layering two distinct glitter materials."
            disablewhen "{ xn__inputsfallback_glitter_space_control_pzb == block } { xn__inputsfallback_glitter_space_control_pzb == none }"
            menu {
                "object"    "Object"
                "reference" "Reference"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputsfallback_glitter_randomness_control_u7b"
            label   "inputs:fallback_glitter_randomness"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_glitter_randomness_tub"
            label   "Fallback Glitter Randomness"
            type    float
            default { "0.5" }
            help    "randomness of flake orientation.  This parameter will only be used when layering two distinct glitter materials."
            disablewhen "{ xn__inputsfallback_glitter_randomness_control_u7b == block } { xn__inputsfallback_glitter_randomness_control_u7b == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__inputsfallback_glitter_style_A_frequency_control_8jc"
            label   "inputs:fallback_glitter_style_A_frequency"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_glitter_style_A_frequency_75b"
            label   "Fallback Glitter Style A Frequency"
            type    float
            default { "1" }
            help    "0 implies none of this style, 1 implies all the flakes will get this style.  This parameter will only be used when layering two distinct glitter materials."
            disablewhen "{ xn__inputsfallback_glitter_style_A_frequency_control_8jc == block } { xn__inputsfallback_glitter_style_A_frequency_control_8jc == none }"
            range   { 0 1 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__inputsfallback_glitter_texture_A_control_75b"
            label   "inputs:fallback_glitter_texture_A"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_glitter_texture_A_6sb"
            label   "Fallback Glitter Texture A"
            type    file
            default { "" }
            help    "filename that points to a texture .exr or .tx file (must be mip-mapped and tiled with maketx).  This parameter will only be used when layering two distinct glitter materials."
            disablewhen "{ xn__inputsfallback_glitter_texture_A_control_75b == block } { xn__inputsfallback_glitter_texture_A_control_75b == none }"
            parmtag { "usdvaluetype" "asset" }
        }
        parm {
            name    "xn__inputsfallback_glitter_style_B_frequency_control_8jc"
            label   "inputs:fallback_glitter_style_B_frequency"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_glitter_style_B_frequency_75b"
            label   "Fallback Glitter Style B Frequency"
            type    float
            default { "1" }
            help    "0 implies none of this style, 1 implies all the flakes will get this style.  This parameter will only be used when layering two distinct glitter materials."
            disablewhen "{ xn__inputsfallback_glitter_style_B_frequency_control_8jc == block } { xn__inputsfallback_glitter_style_B_frequency_control_8jc == none }"
            range   { 0 1 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__inputsfallback_glitter_texture_B_control_75b"
            label   "inputs:fallback_glitter_texture_B"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_glitter_texture_B_6sb"
            label   "Fallback Glitter Texture B"
            type    string
            default { "" }
            help    "filename that points to a texture .exr or .tx file (must be mip-mapped and tiled with maketx).  This parameter will only be used when layering two distinct glitter materials."
            disablewhen "{ xn__inputsfallback_glitter_texture_B_control_75b == block } { xn__inputsfallback_glitter_texture_B_control_75b == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__inputsfallback_glitter_LOD_quality_control_h9b"
            label   "inputs:fallback_glitter_LOD_quality"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_glitter_LOD_quality_gwb"
            label   "Fallback Glitter LOD Quality"
            type    float
            default { "0.5" }
            help    "controls quality of glitter at distances where individual flakes cannot be perceived; at lower values, approximation kicks in earlier.  This parameter will only be used when layering two distinct glitter materials."
            disablewhen "{ xn__inputsfallback_glitter_LOD_quality_control_h9b == block } { xn__inputsfallback_glitter_LOD_quality_control_h9b == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__inputsfallback_glitter_layering_mode_control_qdc"
            label   "inputs:fallback_glitter_layering_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_glitter_layering_mode_pzb"
            label   "Fallback Glitter Layering Mode"
            type    string
            default { "physical" }
            help    "layering mode for glitter on top of the under material. physical: conserves energy and glitter attenuates under material, additive: breaks energy conservation but glitter is never darker than the under material (eg. use case: snow).  This parameter will only be used when layering two distinct glitter materials."
            disablewhen "{ xn__inputsfallback_glitter_layering_mode_control_qdc == block } { xn__inputsfallback_glitter_layering_mode_control_qdc == none }"
            menu {
                "physical"  "Physical"
                "additive"  "Additive"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputsfallback_glitter_debug_mode_control_u7b"
            label   "inputs:fallback_glitter_debug_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfallback_glitter_debug_mode_tub"
            label   "Fallback Glitter Debug Mode"
            type    string
            default { "off" }
            help    "developer debug visualization modes.  This parameter will only be used when layering two distinct glitter materials."
            disablewhen "{ xn__inputsfallback_glitter_debug_mode_control_u7b == block } { xn__inputsfallback_glitter_debug_mode_control_u7b == none }"
            menu {
                "off"           "Off"
                "blend"         "Blend"
                "color"         "Color"
                "averageColor"  "averageColor"
                "footprintArea" "footprintArea"
                "radius"        "Radius"
            }
            parmtag { "usdvaluetype" "token" }
        }
    }

    parm {
        name    "xn__inputsextra_aovs_control_5fb"
        label   "inputs:extra_aovs"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__inputsextra_aovs_41a"
        label   "Extra Aovs"
        type    oppath
        invisible
        default { "" }
        help    "Bind this attribute to a 'ListMap' that contains references to ExtraAovMaps that specify additional outputs that can be assigned to a RenderOutput \"light aov\" result"
        disablewhen "{ xn__inputsextra_aovs_control_5fb == block } { xn__inputsextra_aovs_control_5fb == none }"
        parmtag { "oprelative" "." }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__inputslabel_control_06a"
        label   "inputs:label"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__inputslabel_zta"
        label   "Label"
        type    string
        default { "" }
        help    "label used in material and light aovs"
        disablewhen "{ xn__inputslabel_control_06a == block } { xn__inputslabel_control_06a == none }"
        parmtag { "usdvaluetype" "string" }
    }
    parm {
        name    "xn__inputspriority_control_wcb"
        label   "inputs:priority"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__inputspriority_vya"
        label   "Priority"
        type    integer
        default { "0" }
        help    "The material's place in an order of precedence for overlapping dielectrics. A value of 0 means the priority should be ignored. Materials with lower numbers (higher priority) \"override\" materials with higher numbers (lower priority).  To enable automatic removal of self-overlapping geometry, a non-zero priority must be set on the geometry's material."
        disablewhen "{ xn__inputspriority_control_wcb == block } { xn__inputspriority_control_wcb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "int" }
    }
    parm {
        name    "xn__inputsmaterial_A_control_5fb"
        label   "inputs:material_A"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__inputsmaterial_A_41a"
        label   "Material A"
        type    oppath
        invisible
        default { "" }
        help    "foreground material"
        disablewhen "{ xn__inputsmaterial_A_control_5fb == block } { xn__inputsmaterial_A_control_5fb == none }"
        parmtag { "oprelative" "." }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__inputsmaterial_B_control_5fb"
        label   "inputs:material_B"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__inputsmaterial_B_41a"
        label   "Material B"
        type    oppath
        invisible
        default { "" }
        help    "background material"
        disablewhen "{ xn__inputsmaterial_B_control_5fb == block } { xn__inputsmaterial_B_control_5fb == none }"
        parmtag { "oprelative" "." }
        parmtag { "usdvaluetype" "token" }
    }
    parm {
        name    "xn__inputsmask_control_e5a"
        label   "inputs:mask"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__inputsmask_dsa"
        label   "Mask"
        type    float
        default { "1" }
        help    "foreground material weight"
        disablewhen "{ xn__inputsmask_control_e5a == block } { xn__inputsmask_control_e5a == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "float" }
    }
}
