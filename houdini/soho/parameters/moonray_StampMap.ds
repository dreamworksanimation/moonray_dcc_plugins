#include "$HFS/houdini/soho/parameters/CommonMacros.ds"
{
    name	parameters
    group {
        name    "folder"
        label   "File"

        parm {
            name    "xn__inputspoints_file_control_shb"
            label   "inputs:points_file"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputspoints_file_r3a"
            label   "Points File"
            type    file
            default { "" }
            help    "Alembic file containing the points used to do the stamping"
            disablewhen "{ xn__inputspoints_file_control_shb == block } { xn__inputspoints_file_control_shb == none }"
            parmtag { "usdvaluetype" "asset" }
        }
        parm {
            name    "xn__inputsasset_path_control_5fb"
            label   "inputs:asset_path"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsasset_path_41a"
            label   "Asset Path"
            type    string
            default { "" }
            help    "Path to the points asset within the points file.   If empty, the first child object of the archive top is used."
            disablewhen "{ xn__inputsasset_path_control_5fb == block } { xn__inputsasset_path_control_5fb == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__inputsvalidate_points_data_control_gwb"
            label   "inputs:validate_points_data"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsvalidate_points_data_fjb"
            label   "Validate Points Data"
            type    toggle
            default { "0" }
            help    "Validate points data (i.e. check for inf, nans, normalized non-zero vectors, etc.)"
            disablewhen "{ xn__inputsvalidate_points_data_control_gwb == block } { xn__inputsvalidate_points_data_control_gwb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__inputsuse_evaluation_frame_control_gwb"
            label   "inputs:use_evaluation_frame"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsuse_evaluation_frame_fjb"
            label   "Use Evaluation Frame"
            type    toggle
            default { "1" }
            help    "uses evaluation_frame instead of SceneVariables frame"
            disablewhen "{ xn__inputsuse_evaluation_frame_control_gwb == block } { xn__inputsuse_evaluation_frame_control_gwb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__inputsevaluation_frame_control_xpb"
            label   "inputs:evaluation_frame"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsevaluation_frame_wcb"
            label   "Evaluation Frame"
            type    float
            default { "0" }
            help    "evaluate stamp points at specified frame instead of SceneVariables frame"
            disablewhen "{ xn__inputsevaluation_frame_control_xpb == block } { xn__inputsevaluation_frame_control_xpb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
    }

    group {
        name    "folder2"
        label   "Position"

        parm {
            name    "xn__inputsinput_position_mode_control_tub"
            label   "inputs:input_position_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsinput_position_mode_shb"
            label   "Input Position Mode"
            type    string
            default { "reference" }
            help    "Controls which input position to use when searching for the points.   Selects whether to use the surface position, reference position (\"ref_P\" point attribute), or the input_position parameter."
            disablewhen "{ xn__inputsinput_position_mode_control_tub == block } { xn__inputsinput_position_mode_control_tub == none }"
            menu {
                "surface"           "Surface"
                "reference"         "Reference"
                "input_position"    "Input_Position"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputsinput_position_space_control_gwb"
            label   "inputs:input_position_space"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsinput_position_space_fjb"
            label   "Input Position Space"
            type    string
            default { "object" }
            help    "The space to look up the points in"
            disablewhen "{ input_position_mode == 1 } { xn__inputsinput_position_space_control_gwb == block } { xn__inputsinput_position_space_control_gwb == none }"
            menu {
                "render"    "Render"
                "world"     "World"
                "object"    "Object"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputssearch_max_distance_mode_control_y2b"
            label   "inputs:search_max_distance_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputssearch_max_distance_mode_xpb"
            label   "Search Max Distance Mode"
            type    string
            default { "use_pscale" }
            help    "Method to use for computing the maximum searching distance for the points"
            disablewhen "{ xn__inputssearch_max_distance_mode_control_y2b == block } { xn__inputssearch_max_distance_mode_control_y2b == none }"
            menu {
                "use_pscale"                    "Use_Pscale"
                "calculate_from_scale"          "Calculate_From_Scale"
                "search_max_distance_parameter" "Search_Max_Distance_Parameter"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputssearch_max_distance_control_tub"
            label   "inputs:search_max_distance"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputssearch_max_distance_shb"
            label   "Search Max Distance"
            type    float
            default { "1" }
            help    "Maximum distance to search for the points when search_max_distance_mode is set to \"max_distance_parameter\""
            disablewhen "{ search_max_distance_mode != search_max_distance_parameter } { xn__inputssearch_max_distance_control_tub == block } { xn__inputssearch_max_distance_control_tub == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__inputsoctree_mode_control_shb"
            label   "inputs:octree_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsoctree_mode_r3a"
            label   "Octree Mode"
            type    string
            default { "auto" }
            help    "Whether to use the octree to search.   Auto uses the octree if the point count is greater than 10,000"
            disablewhen "{ xn__inputsoctree_mode_control_shb == block } { xn__inputsoctree_mode_control_shb == none }"
            menu {
                "off"   "Off"
                "on"    "On"
                "auto"  "Auto"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputssearch_max_distance_pad_control_c1b"
            label   "inputs:search_max_distance_pad"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputssearch_max_distance_pad_bob"
            label   "Search Max Distance Pad"
            type    float
            default { "0" }
            help    "Amount to add to max search distance when mode is use_pscale or calculate_from_scale"
            disablewhen "{ search_max_distance_mode == 2 } { xn__inputssearch_max_distance_pad_control_c1b == block } { xn__inputssearch_max_distance_pad_control_c1b == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__inputsmax_sampled_points_control_6sb"
            label   "inputs:max_sampled_points"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsmax_sampled_points_5fb"
            label   "Max Sampled Points"
            type    integer
            default { "200" }
            help    "The maximum number of points to be considered for any given shading sample"
            disablewhen "{ xn__inputsmax_sampled_points_control_6sb == block } { xn__inputsmax_sampled_points_control_6sb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "int" }
        }
    }

    group {
        name    "folder3"
        label   "Texture"

        parm {
            name    "xn__inputsuse_point_cloud_texture_path_control_h9b"
            label   "inputs:use_point_cloud_texture_path"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsuse_point_cloud_texture_path_gwb"
            label   "Use Point Cloud Texture Path"
            type    toggle
            default { "0" }
            help    "Use the \"texture_path\" attribute on the points instead of the texture_path parameter"
            disablewhen "{ xn__inputsuse_point_cloud_texture_path_control_h9b == block } { xn__inputsuse_point_cloud_texture_path_control_h9b == none }"
            parmtag { "usdvaluetype" "bool" }
        }
        parm {
            name    "xn__inputstexture_path_control_fjb"
            label   "inputs:texture_path"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputstexture_path_e5a"
            label   "Texture Path"
            type    file
            default { "" }
            help    "Path to the texture to project from the points"
            disablewhen "{ xn__inputsuse_point_cloud_texture_path_gwb != 0 } { xn__inputstexture_path_control_fjb == block } { xn__inputstexture_path_control_fjb == none }"
            parmtag { "usdvaluetype" "asset" }
        }
        parm {
            name    "xn__inputstexture_gamma_control_1kb"
            label   "inputs:texture_gamma"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputstexture_gamma_06a"
            label   "Texture Gamma"
            type    string
            default { "auto" }
            help    "Controls application of gamma to images (off -0, on - 1, auto - 2).   Auto will apply gamma decoding to 8-bit images"
            disablewhen "{ xn__inputstexture_gamma_control_1kb == block } { xn__inputstexture_gamma_control_1kb == none }"
            menu {
                "off"   "Off"
                "on"    "On"
                "auto"  "Auto"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputstexture_scale_control_1kb"
            label   "inputs:texture_scale"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputstexture_scale_06a"
            label   "Texture Scale"
            type    vector
            size    3
            default { "1" "1" "1" }
            help    "Global scale to apply to the projected textures"
            disablewhen "{ xn__inputstexture_scale_control_1kb == block } { xn__inputstexture_scale_control_1kb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "vector3f" }
        }
    }

    group {
        name    "folder4"
        label   "Alpha"

        parm {
            name    "xn__inputsalpha_channel_control_1kb"
            label   "inputs:alpha_channel"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsalpha_channel_06a"
            label   "Alpha Channel"
            type    string
            default { "alpha" }
            help    "The channel of the texture image to use for the alpha"
            disablewhen "{ xn__inputsalpha_channel_control_1kb == block } { xn__inputsalpha_channel_control_1kb == none }"
            menu {
                "red"       "Red"
                "green"     "Green"
                "blue"      "Blue"
                "alpha"     "Alpha"
                "luminance" "Luminance"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputsalpha_mult_control_5fb"
            label   "inputs:alpha_mult"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsalpha_mult_41a"
            label   "Alpha Mult"
            type    float
            default { "1" }
            help    "Multiplier on the overall opacity of each projection"
            disablewhen "{ xn__inputsalpha_mult_control_5fb == block } { xn__inputsalpha_mult_control_5fb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__inputsuse_point_cloud_alpha_control_2xb"
            label   "inputs:use_point_cloud_alpha"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsuse_point_cloud_alpha_1kb"
            label   "Use Point Cloud Alpha"
            type    toggle
            default { "0" }
            help    "Multiply the alpha by the \"Alpha\" point attribute"
            disablewhen "{ xn__inputsuse_point_cloud_alpha_control_2xb == block } { xn__inputsuse_point_cloud_alpha_control_2xb == none }"
            parmtag { "usdvaluetype" "bool" }
        }
    }

    group {
        name    "folder5"
        label   "Normal"

        parm {
            name    "xn__inputsinput_normal_mode_control_krb"
            label   "inputs:input_normal_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsinput_normal_mode_jeb"
            label   "Input Normal Mode"
            type    string
            default { "reference" }
            help    "Controls which input normal to use when comparing against the point normals using the facing parameters.   Selects whether to use the surface normal, the reference normal (\"ref_N\" point attribute), or the normal evaluated from the \"input_normal_map\" parameter"
            disablewhen "{ xn__inputsinput_normal_mode_control_krb == block } { xn__inputsinput_normal_mode_control_krb == none }"
            menu {
                "surface"           "Surface"
                "reference"         "Reference"
                "input_normal_map"  "Input_Normal_Map"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputsinput_normal_space_control_6sb"
            label   "inputs:input_normal_space"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsinput_normal_space_5fb"
            label   "Input Normal Space"
            type    string
            default { "object" }
            help    "The space to transform the input normal into when comparing against the point normals for use with the facing controls"
            disablewhen "{ input_normal_mode == 1 } { xn__inputsinput_normal_space_control_6sb == block } { xn__inputsinput_normal_space_control_6sb == none }"
            menu {
                "render"    "Render"
                "world"     "World"
                "object"    "Object"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputsinput_normal_map_control_xpb"
            label   "inputs:input_normal_map"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsinput_normal_map_wcb"
            label   "Input Normal Map"
            type    oppath
            invisible
            default { "" }
            help    "Specifies a NormalMap to evaluate for use with the facing parameters."
            disablewhen "{ input_normal_mode != input_normal_map } { xn__inputsinput_normal_map_control_xpb == block } { xn__inputsinput_normal_map_control_xpb == none }"
            parmtag { "oprelative" "." }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputsinput_normal_map_dial_control_2xb"
            label   "inputs:input_normal_map_dial"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsinput_normal_map_dial_1kb"
            label   "Input Normal Map Dial"
            type    float
            default { "1" }
            help    "Controls the amount of influence of the input_normal_map"
            disablewhen "{ input_normal_mode != input_normal_map } { xn__inputsinput_normal_map_dial_control_2xb == block } { xn__inputsinput_normal_map_dial_control_2xb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__inputsmin_facing_tolerance_control_gwb"
            label   "inputs:min_facing_tolerance"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsmin_facing_tolerance_fjb"
            label   "Min Facing Tolerance"
            type    float
            default { "0.4" }
            help    "Fades point projection to zero when the dot product of the surface normal and point normal is below this value"
            disablewhen "{ xn__inputsmin_facing_tolerance_control_gwb == block } { xn__inputsmin_facing_tolerance_control_gwb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__inputsmax_facing_tolerance_control_gwb"
            label   "inputs:max_facing_tolerance"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsmax_facing_tolerance_fjb"
            label   "Max Facing Tolerance"
            type    float
            default { "0.5" }
            help    "Fades point projection to one when the dot product of the surface normal and point normal is above this value"
            disablewhen "{ xn__inputsmax_facing_tolerance_control_gwb == block } { xn__inputsmax_facing_tolerance_control_gwb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
        parm {
            name    "xn__inputsfacing_bias_control_shb"
            label   "inputs:facing_bias"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsfacing_bias_r3a"
            label   "Facing Bias"
            type    float
            default { "1" }
            help    "Controls the shape of the fade between min_facing_tolerance and max_facing_tolerance.   Higher values fade quicker to zero"
            disablewhen "{ xn__inputsfacing_bias_control_shb == block } { xn__inputsfacing_bias_control_shb == none }"
            range   { 0 10 }
            parmtag { "usdvaluetype" "float" }
        }
    }

    group {
        name    "folder6"
        label   "Output"

        parm {
            name    "xn__inputsoutput_mode_control_shb"
            label   "inputs:output_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsoutput_mode_r3a"
            label   "Output Mode"
            type    string
            default { "color" }
            help    "Whether to output the accumulated color(texture color and or point color), alpha values, or vector_attribute values"
            disablewhen "{ xn__inputsoutput_mode_control_shb == block } { xn__inputsoutput_mode_control_shb == none }"
            menu {
                "color"             "Color"
                "alpha_accumulate"  "Alpha_Accumulate"
                "alpha_max"         "Alpha_Max"
                "vector"            "Vector"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputscolor_mode_control_5fb"
            label   "inputs:color_mode"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputscolor_mode_41a"
            label   "Color Mode"
            type    string
            default { "texture" }
            help    "Controls whether to use the color from the points, the color from the texture map, or the color of the points multiplied times the color of the texture map"
            disablewhen "{ output_mode != color } { xn__inputscolor_mode_control_5fb == block } { xn__inputscolor_mode_control_5fb == none }"
            menu {
                "texture"           "Texture"
                "points"            "Points"
                "texture_x_points"  "Texture_X_Points"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputscolor_channel_control_1kb"
            label   "inputs:color_channel"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputscolor_channel_06a"
            label   "Color Channel"
            type    string
            default { "rgb" }
            help    "The channel(s) of the texture image to use for the color"
            disablewhen "{ xn__inputscolor_channel_control_1kb == block } { xn__inputscolor_channel_control_1kb == none }"
            menu {
                "red"       "Red"
                "green"     "Green"
                "blue"      "Blue"
                "alpha"     "Alpha"
                "luminance" "Luminance"
                "rgb"       "Rgb"
            }
            parmtag { "usdvaluetype" "token" }
        }
        parm {
            name    "xn__inputsvector_attribute_control_xpb"
            label   "inputs:vector_attribute"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsvector_attribute_wcb"
            label   "Vector Attribute"
            type    string
            default { "" }
            help    "Vector attribute to stamp if output_mode is set to vector"
            disablewhen "{ output_mode != vector } { xn__inputsvector_attribute_control_xpb == block } { xn__inputsvector_attribute_control_xpb == none }"
            parmtag { "usdvaluetype" "string" }
        }
        parm {
            name    "xn__inputsvector_attribute_transform_control_75b"
            label   "inputs:vector_attribute_transform"
            type    string
            default { "none" }
            menujoin {
                "set"           "Set Or Create"
                "setexisting"   "Set if Exists"
                "block"         "Block"
                "none"          "Do Nothing"
            }
        }
        parm {
            name    "xn__inputsvector_attribute_transform_6sb"
            label   "Vector Attribute Transform"
            type    string
            default { "do not transform" }
            help    "How to transform the vector attribute.  The \"world-to-tangent-to-render\" choice requires the geometry to have both ref_P and ref_N primitive attributes"
            disablewhen "{ output_mode != vector } { xn__inputsvector_attribute_transform_control_75b == block } { xn__inputsvector_attribute_transform_control_75b == none }"
            menu {
                "do not transform"                              "Do Not Transform"
                "world-to-render (for non-deforming)"           "World-To-Render (For Non-Deforming)"
                "world-to-tangent-to-render (for deforming)"    "World-To-Tangent-To-Render (For Deforming)"
            }
            parmtag { "usdvaluetype" "token" }
        }
    }

    parm {
        name    "xn__inputsinput_position_control_omb"
        label   "inputs:input_position"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__inputsinput_position_n8a"
        label   "Input Position"
        type    vector
        size    3
        default { "0" "0" "0" }
        help    "Bind position data here"
        disablewhen "{ input_position_mode != input_position } { xn__inputsinput_position_control_omb == block } { xn__inputsinput_position_control_omb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "vector3f" }
    }
    parm {
        name    "xn__inputsdefault_value_control_1kb"
        label   "inputs:default_value"
        type    string
        default { "none" }
        menujoin {
            "set"           "Set Or Create"
            "setexisting"   "Set if Exists"
            "block"         "Block"
            "none"          "Do Nothing"
        }
    }
    parm {
        name    "xn__inputsdefault_value_06a"
        label   "Default Value"
        type    color
        size    3
        default { "0" "0" "0" }
        help    "The value to use where there are no stamps present"
        disablewhen "{ xn__inputsdefault_value_control_1kb == block } { xn__inputsdefault_value_control_1kb == none }"
        range   { 0 10 }
        parmtag { "usdvaluetype" "color3f" }
    }
}
